<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/sameerasw/airsync/DeviceInfoUtil.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/sameerasw/airsync/DeviceInfoUtil.kt" />
              <option name="originalContent" value="package com.sameerasw.airsync&#10;&#10;import android.content.Context&#10;import android.content.Intent&#10;import android.content.IntentFilter&#10;import android.media.AudioManager&#10;import android.net.wifi.WifiManager&#10;import android.os.BatteryManager&#10;import android.os.Build&#10;import android.provider.Settings&#10;import java.net.NetworkInterface&#10;import java.util.*&#10;&#10;object DeviceInfoUtil {&#10;&#10;    fun getDeviceName(context: Context): String {&#10;        return try {&#10;            Settings.Global.getString(context.contentResolver, Settings.Global.DEVICE_NAME)&#10;                ?: Settings.Secure.getString(context.contentResolver, &quot;bluetooth_name&quot;)&#10;                ?: Build.MODEL&#10;                ?: &quot;Android Device&quot;&#10;        } catch (_: Exception) {&#10;            Build.MODEL ?: &quot;Android Device&quot;&#10;        }&#10;    }&#10;&#10;    fun getLocalIpAddress(): String? {&#10;        try {&#10;            val interfaces = Collections.list(NetworkInterface.getNetworkInterfaces())&#10;            for (networkInterface in interfaces) {&#10;                val addresses = Collections.list(networkInterface.inetAddresses)&#10;                for (address in addresses) {&#10;                    if (!address.isLoopbackAddress) {&#10;                        val hostAddress = address.hostAddress&#10;                        if (hostAddress != null &amp;&amp; hostAddress.contains(&quot;.&quot;) &amp;&amp; !hostAddress.contains(&quot;:&quot;)) {&#10;                            // IPv4 address&#10;                            return hostAddress&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        } catch (_: Exception) {&#10;            // Ignore exceptions&#10;        }&#10;        return null&#10;    }&#10;&#10;    @Suppress(&quot;DEPRECATION&quot;)&#10;    fun getWifiIpAddress(context: Context): String? {&#10;        return try {&#10;            val wifiManager = context.applicationContext.getSystemService(Context.WIFI_SERVICE) as WifiManager&#10;            val wifiInfo = wifiManager.connectionInfo&#10;            val ipAddress = wifiInfo.ipAddress&#10;            if (ipAddress != 0) {&#10;                String.format(&#10;                    Locale.US,&#10;                    &quot;%d.%d.%d.%d&quot;,&#10;                    ipAddress and 0xff,&#10;                    ipAddress shr 8 and 0xff,&#10;                    ipAddress shr 16 and 0xff,&#10;                    ipAddress shr 24 and 0xff&#10;                )&#10;            } else {&#10;                getLocalIpAddress()&#10;            }&#10;        } catch (_: Exception) {&#10;            getLocalIpAddress()&#10;        }&#10;    }&#10;&#10;    fun getBatteryInfo(context: Context): BatteryInfo {&#10;        return try {&#10;            val batteryIntent = context.registerReceiver(null, IntentFilter(Intent.ACTION_BATTERY_CHANGED))&#10;            val level = batteryIntent?.getIntExtra(BatteryManager.EXTRA_LEVEL, -1) ?: -1&#10;            val scale = batteryIntent?.getIntExtra(BatteryManager.EXTRA_SCALE, -1) ?: -1&#10;            val status = batteryIntent?.getIntExtra(BatteryManager.EXTRA_STATUS, -1) ?: -1&#10;&#10;            val batteryPercent = if (level != -1 &amp;&amp; scale != -1) {&#10;                (level * 100 / scale.toFloat()).toInt()&#10;            } else {&#10;                0 // Default to 0 instead of -1&#10;            }&#10;&#10;            val isCharging = status == BatteryManager.BATTERY_STATUS_CHARGING ||&#10;                    status == BatteryManager.BATTERY_STATUS_FULL&#10;&#10;            BatteryInfo(batteryPercent, isCharging)&#10;        } catch (_: Exception) {&#10;            BatteryInfo(0, false)&#10;        }&#10;    }&#10;&#10;    fun getAudioInfo(context: Context): AudioInfo {&#10;        return try {&#10;            val audioManager = context.getSystemService(Context.AUDIO_SERVICE) as AudioManager&#10;            val currentVolume = audioManager.getStreamVolume(AudioManager.STREAM_MUSIC)&#10;            val maxVolume = audioManager.getStreamMaxVolume(AudioManager.STREAM_MUSIC)&#10;            val isMuted = currentVolume == 0&#10;            val volumePercent = if (maxVolume &gt; 0) {&#10;                (currentVolume * 100 / maxVolume)&#10;            } else {&#10;                0&#10;            }&#10;&#10;            // Get media information from notification listener&#10;            val mediaInfo = MediaNotificationListener.getMediaInfo(context)&#10;&#10;            AudioInfo(&#10;                isPlaying = mediaInfo.isPlaying,&#10;                title = mediaInfo.title.ifEmpty { &quot;&quot; }, // Ensure empty string instead of null&#10;                artist = mediaInfo.artist.ifEmpty { &quot;&quot; }, // Ensure empty string instead of null&#10;                volume = volumePercent,&#10;                isMuted = isMuted&#10;            )&#10;        } catch (_: Exception) {&#10;            AudioInfo(false, &quot;&quot;, &quot;&quot;, 0, true)&#10;        }&#10;    }&#10;&#10;    fun generateDeviceStatusJson(context: Context, port: Int): String {&#10;        val batteryInfo = getBatteryInfo(context)&#10;        val audioInfo = getAudioInfo(context)&#10;&#10;        return &quot;&quot;&quot;&#10;        {&#10;            &quot;type&quot;: &quot;status&quot;,&#10;            &quot;data&quot;: {&#10;                &quot;battery&quot;: {&#10;                    &quot;level&quot;: ${batteryInfo.level},&#10;                    &quot;isCharging&quot;: ${batteryInfo.isCharging}&#10;                },&#10;                &quot;isPaired&quot;: true,&#10;                &quot;music&quot;: {&#10;                    &quot;isPlaying&quot;: ${audioInfo.isPlaying},&#10;                    &quot;title&quot;: &quot;${audioInfo.title}&quot;,&#10;                    &quot;artist&quot;: &quot;${audioInfo.artist}&quot;,&#10;                    &quot;volume&quot;: ${audioInfo.volume},&#10;                    &quot;isMuted&quot;: ${audioInfo.isMuted}&#10;                }&#10;            }&#10;        }&#10;        &quot;&quot;&quot;.trimIndent()&#10;    }&#10;}&#10;&#10;data class BatteryInfo(&#10;    val level: Int,&#10;    val isCharging: Boolean&#10;)&#10;&#10;data class AudioInfo(&#10;    val isPlaying: Boolean,&#10;    val title: String,&#10;    val artist: String,&#10;    val volume: Int,&#10;    val isMuted: Boolean&#10;)&#10;" />
              <option name="updatedContent" value="package com.sameerasw.airsync&#10;&#10;import android.content.Context&#10;import android.content.Intent&#10;import android.content.IntentFilter&#10;import android.media.AudioManager&#10;import android.net.wifi.WifiManager&#10;import android.os.BatteryManager&#10;import android.os.Build&#10;import android.provider.Settings&#10;import android.util.Log&#10;import java.net.NetworkInterface&#10;import java.util.*&#10;&#10;object DeviceInfoUtil {&#10;&#10;    fun getDeviceName(context: Context): String {&#10;        return try {&#10;            Settings.Global.getString(context.contentResolver, Settings.Global.DEVICE_NAME)&#10;                ?: Settings.Secure.getString(context.contentResolver, &quot;bluetooth_name&quot;)&#10;                ?: Build.MODEL&#10;                ?: &quot;Android Device&quot;&#10;        } catch (_: Exception) {&#10;            Build.MODEL ?: &quot;Android Device&quot;&#10;        }&#10;    }&#10;&#10;    fun getLocalIpAddress(): String? {&#10;        try {&#10;            val interfaces = Collections.list(NetworkInterface.getNetworkInterfaces())&#10;            for (networkInterface in interfaces) {&#10;                val addresses = Collections.list(networkInterface.inetAddresses)&#10;                for (address in addresses) {&#10;                    if (!address.isLoopbackAddress) {&#10;                        val hostAddress = address.hostAddress&#10;                        if (hostAddress != null &amp;&amp; hostAddress.contains(&quot;.&quot;) &amp;&amp; !hostAddress.contains(&quot;:&quot;)) {&#10;                            // IPv4 address&#10;                            return hostAddress&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        } catch (_: Exception) {&#10;            // Ignore exceptions&#10;        }&#10;        return null&#10;    }&#10;&#10;    @Suppress(&quot;DEPRECATION&quot;)&#10;    fun getWifiIpAddress(context: Context): String? {&#10;        return try {&#10;            val wifiManager = context.applicationContext.getSystemService(Context.WIFI_SERVICE) as WifiManager&#10;            val wifiInfo = wifiManager.connectionInfo&#10;            val ipAddress = wifiInfo.ipAddress&#10;            if (ipAddress != 0) {&#10;                String.format(&#10;                    Locale.US,&#10;                    &quot;%d.%d.%d.%d&quot;,&#10;                    ipAddress and 0xff,&#10;                    ipAddress shr 8 and 0xff,&#10;                    ipAddress shr 16 and 0xff,&#10;                    ipAddress shr 24 and 0xff&#10;                )&#10;            } else {&#10;                getLocalIpAddress()&#10;            }&#10;        } catch (_: Exception) {&#10;            getLocalIpAddress()&#10;        }&#10;    }&#10;&#10;    fun getBatteryInfo(context: Context): BatteryInfo {&#10;        return try {&#10;            val batteryIntent = context.registerReceiver(null, IntentFilter(Intent.ACTION_BATTERY_CHANGED))&#10;            val level = batteryIntent?.getIntExtra(BatteryManager.EXTRA_LEVEL, -1) ?: -1&#10;            val scale = batteryIntent?.getIntExtra(BatteryManager.EXTRA_SCALE, -1) ?: -1&#10;            val status = batteryIntent?.getIntExtra(BatteryManager.EXTRA_STATUS, -1) ?: -1&#10;&#10;            val batteryPercent = if (level != -1 &amp;&amp; scale != -1) {&#10;                (level * 100 / scale.toFloat()).toInt()&#10;            } else {&#10;                0 // Default to 0 instead of -1&#10;            }&#10;&#10;            val isCharging = status == BatteryManager.BATTERY_STATUS_CHARGING ||&#10;                    status == BatteryManager.BATTERY_STATUS_FULL&#10;&#10;            BatteryInfo(batteryPercent, isCharging)&#10;        } catch (_: Exception) {&#10;            BatteryInfo(0, false)&#10;        }&#10;    }&#10;&#10;    fun getAudioInfo(context: Context): AudioInfo {&#10;        return try {&#10;            val audioManager = context.getSystemService(Context.AUDIO_SERVICE) as AudioManager&#10;            val currentVolume = audioManager.getStreamVolume(AudioManager.STREAM_MUSIC)&#10;            val maxVolume = audioManager.getStreamMaxVolume(AudioManager.STREAM_MUSIC)&#10;            val isMuted = currentVolume == 0&#10;            val volumePercent = if (maxVolume &gt; 0) {&#10;                (currentVolume * 100 / maxVolume)&#10;            } else {&#10;                0&#10;            }&#10;&#10;            // Get fresh media information every time (don't cache)&#10;            val mediaInfo = MediaNotificationListener.getMediaInfo(context)&#10;            Log.d(&quot;DeviceInfoUtil&quot;, &quot;Retrieved media info: $mediaInfo&quot;)&#10;&#10;            AudioInfo(&#10;                isPlaying = mediaInfo.isPlaying,&#10;                title = mediaInfo.title.ifEmpty { &quot;&quot; },&#10;                artist = mediaInfo.artist.ifEmpty { &quot;&quot; },&#10;                volume = volumePercent,&#10;                isMuted = isMuted&#10;            )&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;DeviceInfoUtil&quot;, &quot;Error getting audio info: ${e.message}&quot;)&#10;            AudioInfo(false, &quot;&quot;, &quot;&quot;, 0, true)&#10;        }&#10;    }&#10;&#10;    fun generateDeviceStatusJson(context: Context, port: Int): String {&#10;        val batteryInfo = getBatteryInfo(context)&#10;        val audioInfo = getAudioInfo(context)&#10;&#10;        return JsonUtil.createDeviceStatusJson(&#10;            batteryLevel = batteryInfo.level,&#10;            isCharging = batteryInfo.isCharging,&#10;            isPlaying = audioInfo.isPlaying,&#10;            title = audioInfo.title,&#10;            artist = audioInfo.artist,&#10;            volume = audioInfo.volume,&#10;            isMuted = audioInfo.isMuted&#10;        )&#10;    }&#10;}&#10;&#10;data class BatteryInfo(&#10;    val level: Int,&#10;    val isCharging: Boolean&#10;)&#10;&#10;data class AudioInfo(&#10;    val isPlaying: Boolean,&#10;    val title: String,&#10;    val artist: String,&#10;    val volume: Int,&#10;    val isMuted: Boolean&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/sameerasw/airsync/JsonUtil.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/sameerasw/airsync/JsonUtil.kt" />
              <option name="updatedContent" value="package com.sameerasw.airsync&#10;&#10;object JsonUtil {&#10;    /**&#10;     * Ensures JSON string is a single line by removing all newlines and extra whitespace&#10;     */&#10;    fun toSingleLine(json: String): String {&#10;        return json.replace(Regex(&quot;\\s*\\n\\s*&quot;), &quot; &quot;)&#10;                  .replace(Regex(&quot;\\s+&quot;), &quot; &quot;)&#10;                  .trim()&#10;    }&#10;    &#10;    /**&#10;     * Creates a single-line JSON string for device info&#10;     */&#10;    fun createDeviceInfoJson(name: String, ipAddress: String, port: Int): String {&#10;        return &quot;&quot;&quot;{&quot;type&quot;:&quot;device&quot;,&quot;data&quot;:{&quot;name&quot;:&quot;$name&quot;,&quot;ipAddress&quot;:&quot;$ipAddress&quot;,&quot;port&quot;:$port}}&quot;&quot;&quot;&#10;    }&#10;    &#10;    /**&#10;     * Creates a single-line JSON string for notifications&#10;     */&#10;    fun createNotificationJson(title: String, body: String, app: String): String {&#10;        return &quot;&quot;&quot;{&quot;type&quot;:&quot;notification&quot;,&quot;data&quot;:{&quot;title&quot;:&quot;$title&quot;,&quot;body&quot;:&quot;$body&quot;,&quot;app&quot;:&quot;$app&quot;}}&quot;&quot;&quot;&#10;    }&#10;    &#10;    /**&#10;     * Creates a single-line JSON string for device status&#10;     */&#10;    fun createDeviceStatusJson(&#10;        batteryLevel: Int,&#10;        isCharging: Boolean,&#10;        isPlaying: Boolean,&#10;        title: String,&#10;        artist: String,&#10;        volume: Int,&#10;        isMuted: Boolean&#10;    ): String {&#10;        return &quot;&quot;&quot;{&quot;type&quot;:&quot;status&quot;,&quot;data&quot;:{&quot;battery&quot;:{&quot;level&quot;:$batteryLevel,&quot;isCharging&quot;:$isCharging},&quot;isPaired&quot;:true,&quot;music&quot;:{&quot;isPlaying&quot;:$isPlaying,&quot;title&quot;:&quot;$title&quot;,&quot;artist&quot;:&quot;$artist&quot;,&quot;volume&quot;:$volume,&quot;isMuted&quot;:$isMuted}}}&quot;&quot;&quot;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/sameerasw/airsync/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/sameerasw/airsync/MainActivity.kt" />
              <option name="originalContent" value="package com.sameerasw.airsync&#10;&#10;import android.content.ComponentName&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.provider.Settings&#10;import android.util.Log&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.window.Dialog&#10;import androidx.compose.ui.text.font.FontWeight&#10;import com.sameerasw.airsync.ui.theme.AirSyncTheme&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.withContext&#10;import java.io.BufferedReader&#10;import java.io.InputStreamReader&#10;import java.io.PrintWriter&#10;import java.net.Socket&#10;&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;&#10;        val data: android.net.Uri? = intent?.data&#10;        val ip = data?.host ?: &quot;192.168.1.100&quot;&#10;        val port = data?.port?.takeIf { it != -1 }?.toString() ?: &quot;6996&quot;&#10;        val isFromQrScan = data != null&#10;&#10;        setContent {&#10;            AirSyncTheme {&#10;                Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding -&gt;&#10;                    SocketTestScreen(&#10;                        modifier = Modifier.padding(innerPadding),&#10;                        initialIp = ip,&#10;                        initialPort = port,&#10;                        showConnectionDialog = isFromQrScan&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun SocketTestScreen(&#10;    modifier: Modifier = Modifier,&#10;    initialIp: String = &quot;192.168.1.100&quot;,&#10;    initialPort: String = &quot;6996&quot;,&#10;    showConnectionDialog: Boolean = false&#10;) {&#10;    val context = LocalContext.current&#10;&#10;    // Get actual device information&#10;    val deviceName = remember { DeviceInfoUtil.getDeviceName(context) }&#10;    val localIp = remember { DeviceInfoUtil.getWifiIpAddress(context) ?: &quot;Unknown&quot; }&#10;&#10;    var ipAddress by remember { mutableStateOf(initialIp) }&#10;    var port by remember { mutableStateOf(initialPort) }&#10;    var deviceNameInput by remember { mutableStateOf(deviceName) }&#10;    var customMessage by remember { mutableStateOf(&quot;{\&quot;type\&quot;:\&quot;notification\&quot;,\&quot;data\&quot;:{\&quot;title\&quot;:\&quot;Test\&quot;,\&quot;body\&quot;:\&quot;Hello!\&quot;,\&quot;app\&quot;:\&quot;WhatsApp\&quot;}}&quot;) }&#10;    var response by remember { mutableStateOf(&quot;&quot;) }&#10;    var isLoading by remember { mutableStateOf(false) }&#10;    var isDialogVisible by remember { mutableStateOf(showConnectionDialog) }&#10;    var showPermissionDialog by remember { mutableStateOf(false) }&#10;    val scope = rememberCoroutineScope()&#10;&#10;    // Use mutableState for permission checks so they can be updated&#10;    var isNotificationEnabled by remember { mutableStateOf(PermissionUtil.isNotificationListenerEnabled(context)) }&#10;    var missingPermissions by remember { mutableStateOf(PermissionUtil.getAllMissingPermissions(context)) }&#10;&#10;    // Update permission status when app resumes or composition recomposes&#10;    LaunchedEffect(Unit) {&#10;        // Initial check&#10;        isNotificationEnabled = PermissionUtil.isNotificationListenerEnabled(context)&#10;        missingPermissions = PermissionUtil.getAllMissingPermissions(context)&#10;&#10;        if (missingPermissions.isNotEmpty()) {&#10;            showPermissionDialog = true&#10;        }&#10;    }&#10;&#10;    // Add a refresh function to check permissions again&#10;    fun refreshPermissions() {&#10;        isNotificationEnabled = PermissionUtil.isNotificationListenerEnabled(context)&#10;        missingPermissions = PermissionUtil.getAllMissingPermissions(context)&#10;    }&#10;&#10;    fun send(message: String) {&#10;        scope.launch {&#10;            testSocket(ipAddress, port.toIntOrNull() ?: 6996, message) { result -&gt;&#10;                response = result&#10;                isLoading = false&#10;            }&#10;        }&#10;        isLoading = true&#10;        response = &quot;&quot;&#10;    }&#10;&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        Text(&quot;AirSync&quot;, style = MaterialTheme.typography.headlineMedium)&#10;&#10;        // Permission Status Card&#10;        if (missingPermissions.isNotEmpty()) {&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.errorContainer)&#10;            ) {&#10;                Column(modifier = Modifier.padding(16.dp)) {&#10;                    Text(&quot;⚠️ Permissions Required&quot;,&#10;                         style = MaterialTheme.typography.titleMedium,&#10;                         color = MaterialTheme.colorScheme.onErrorContainer)&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    Text(&quot;Missing: ${missingPermissions.joinToString(&quot;, &quot;)}&quot;,&#10;                         style = MaterialTheme.typography.bodyMedium,&#10;                         color = MaterialTheme.colorScheme.onErrorContainer)&#10;&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth().padding(top = 8.dp),&#10;                        horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                    ) {&#10;                        Button(&#10;                            onClick = { showPermissionDialog = true },&#10;                            modifier = Modifier.weight(1f),&#10;                            colors = ButtonDefaults.buttonColors(&#10;                                containerColor = MaterialTheme.colorScheme.error&#10;                            )&#10;                        ) {&#10;                            Text(&quot;Grant Permissions&quot;, color = MaterialTheme.colorScheme.onError)&#10;                        }&#10;&#10;                        OutlinedButton(&#10;                            onClick = { refreshPermissions() },&#10;                            modifier = Modifier.weight(1f)&#10;                        ) {&#10;                            Text(&quot;Refresh&quot;)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Device Info Section&#10;        Card(modifier = Modifier.fillMaxWidth()) {&#10;            Column(modifier = Modifier.padding(16.dp)) {&#10;                Text(&quot;Device Information&quot;, style = MaterialTheme.typography.titleMedium)&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                Text(&quot;Local IP: $localIp&quot;, style = MaterialTheme.typography.bodyMedium)&#10;&#10;                // Real-time device status (refresh every time)&#10;                val batteryInfo by rememberUpdatedState(DeviceInfoUtil.getBatteryInfo(context))&#10;                val audioInfo by rememberUpdatedState(DeviceInfoUtil.getAudioInfo(context))&#10;&#10;                Text(&quot;Battery: ${batteryInfo.level}% ${if (batteryInfo.isCharging) &quot;⚡&quot; else &quot;&quot;}&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium)&#10;                Text(&quot;Volume: ${audioInfo.volume}% ${if (audioInfo.isMuted) &quot;&quot; else &quot;&quot;}&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium)&#10;&#10;                // Show media info status with refresh&#10;                if (isNotificationEnabled) {&#10;                    if (audioInfo.title.isNotEmpty()) {&#10;                        Text(&quot; ${audioInfo.title} - ${audioInfo.artist}&quot;,&#10;                             style = MaterialTheme.typography.bodyMedium)&#10;                    } else {&#10;                        Text(&quot; No media playing&quot;, style = MaterialTheme.typography.bodyMedium)&#10;                    }&#10;                } else {&#10;                    Text(&quot; Media info unavailable (permission needed)&quot;,&#10;                         style = MaterialTheme.typography.bodyMedium,&#10;                         color = MaterialTheme.colorScheme.error)&#10;                }&#10;&#10;                OutlinedTextField(&#10;                    value = deviceNameInput,&#10;                    onValueChange = { deviceNameInput = it },&#10;                    label = { Text(&quot;Device Name&quot;) },&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;&#10;                // Add refresh button for testing media detection&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth().padding(top = 8.dp),&#10;                    horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    OutlinedButton(&#10;                        onClick = {&#10;                            refreshPermissions()&#10;                            // Force recomposition to get fresh media info&#10;                        },&#10;                        modifier = Modifier.weight(1f)&#10;                    ) {&#10;                        Text(&quot;Refresh Media&quot;)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Connection Settings&#10;        OutlinedTextField(&#10;            value = ipAddress,&#10;            onValueChange = { ipAddress = it },&#10;            label = { Text(&quot;Desktop IP Address&quot;) },&#10;            modifier = Modifier.fillMaxWidth()&#10;        )&#10;&#10;        OutlinedTextField(&#10;            value = port,&#10;            onValueChange = { port = it },&#10;            label = { Text(&quot;Desktop Port&quot;) },&#10;            modifier = Modifier.fillMaxWidth()&#10;        )&#10;&#10;        HorizontalDivider()&#10;&#10;        Button(&#10;            onClick = {&#10;                val message = &quot;&quot;&quot;{&quot;type&quot;:&quot;device&quot;,&quot;data&quot;:{&quot;name&quot;:&quot;$deviceNameInput&quot;,&quot;ipAddress&quot;:&quot;$localIp&quot;,&quot;port&quot;:${port.toIntOrNull() ?: 6996}}}&quot;&quot;&quot;&#10;                send(message)&#10;            },&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            Text(&quot;Send Device Info&quot;)&#10;        }&#10;&#10;        Button(&#10;            onClick = {&#10;                val message = &quot;&quot;&quot;{&quot;type&quot;:&quot;notification&quot;,&quot;data&quot;:{&quot;title&quot;:&quot;Test Message&quot;,&quot;body&quot;:&quot;This is a simulated notification.&quot;,&quot;app&quot;:&quot;Telegram&quot;}}&quot;&quot;&quot;&#10;                send(message)&#10;&#10;            },&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            Text(&quot;Send Notification&quot;)&#10;        }&#10;&#10;        Button(&#10;            onClick = {&#10;                val message = DeviceInfoUtil.generateDeviceStatusJson(context, port.toIntOrNull() ?: 6996)&#10;                send(message)&#10;&#10;            },&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            Text(&quot;Send Device Status&quot;)&#10;        }&#10;&#10;        HorizontalDivider()&#10;&#10;        OutlinedTextField(&#10;            value = customMessage,&#10;            onValueChange = { customMessage = it },&#10;            label = { Text(&quot;Custom Raw JSON&quot;) },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            maxLines = 4&#10;        )&#10;&#10;        Button(&#10;            onClick = { send(customMessage) },&#10;            enabled = !isLoading &amp;&amp; ipAddress.isNotBlank() &amp;&amp; port.isNotBlank() &amp;&amp; customMessage.isNotBlank(),&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            if (isLoading) {&#10;                CircularProgressIndicator(modifier = Modifier.size(16.dp), strokeWidth = 2.dp)&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;            }&#10;            Text(if (isLoading) &quot;Sending...&quot; else &quot;Send Custom Message&quot;)&#10;        }&#10;&#10;        if (response.isNotEmpty()) {&#10;            Card(modifier = Modifier.fillMaxWidth()) {&#10;                Text(response, modifier = Modifier.padding(16.dp))&#10;            }&#10;        }&#10;&#10;        if (isDialogVisible) {&#10;            ConnectionDialog(&#10;                deviceName = deviceNameInput,&#10;                localIp = localIp,&#10;                desktopIp = ipAddress,&#10;                port = port,&#10;                onDismiss = { isDialogVisible = false },&#10;                onConnect = {&#10;                    isDialogVisible = false&#10;                    // Send device info automatically with real device data&#10;                    val message = &quot;&quot;&quot;{&quot;type&quot;:&quot;device&quot;,&quot;data&quot;:{&quot;name&quot;:&quot;$deviceNameInput&quot;,&quot;ipAddress&quot;:&quot;$localIp&quot;,&quot;port&quot;:${port.toIntOrNull() ?: 6996}}}&quot;&quot;&quot;&#10;                    send(message)&#10;                }&#10;            )&#10;        }&#10;&#10;        if (showPermissionDialog) {&#10;            PermissionDialog(&#10;                missingPermissions = missingPermissions,&#10;                onDismiss = { showPermissionDialog = false },&#10;                onGrantPermissions = {&#10;                    PermissionUtil.openNotificationListenerSettings(context)&#10;                    showPermissionDialog = false&#10;                }&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ConnectionDialog(&#10;    deviceName: String,&#10;    localIp: String,&#10;    desktopIp: String,&#10;    port: String,&#10;    onDismiss: () -&gt; Unit,&#10;    onConnect: () -&gt; Unit&#10;) {&#10;    Dialog(onDismissRequest = onDismiss) {&#10;        Surface(&#10;            shape = MaterialTheme.shapes.medium,&#10;            tonalElevation = 3.dp&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .padding(24.dp)&#10;                    .width(280.dp),&#10;                verticalArrangement = Arrangement.spacedBy(16.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;Connect to Desktop?&quot;,&#10;                    style = MaterialTheme.typography.titleMedium.copy(fontWeight = FontWeight.Bold)&#10;                )&#10;&#10;                Text(&quot;Do you want to connect to:&quot;)&#10;                Text(&quot;IP Address: $desktopIp&quot;)&#10;                Text(&quot;Port: $port&quot;)&#10;&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    OutlinedButton(&#10;                        onClick = onDismiss,&#10;                        modifier = Modifier.weight(1f)&#10;                    ) {&#10;                        Text(&quot;Cancel&quot;)&#10;                    }&#10;&#10;                    Button(&#10;                        onClick = onConnect,&#10;                        modifier = Modifier.weight(1f)&#10;                    ) {&#10;                        Text(&quot;Connect&quot;)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun PermissionDialog(&#10;    missingPermissions: List&lt;String&gt;,&#10;    onDismiss: () -&gt; Unit,&#10;    onGrantPermissions: () -&gt; Unit&#10;) {&#10;    Dialog(onDismissRequest = onDismiss) {&#10;        Surface(&#10;            shape = MaterialTheme.shapes.medium,&#10;            tonalElevation = 3.dp&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .padding(24.dp)&#10;                    .width(300.dp),&#10;                verticalArrangement = Arrangement.spacedBy(16.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;Permissions Required&quot;,&#10;                    style = MaterialTheme.typography.titleMedium.copy(fontWeight = FontWeight.Bold)&#10;                )&#10;&#10;                Text(&quot;The following permissions are needed for full functionality:&quot;)&#10;                missingPermissions.forEach { permission -&gt;&#10;                    Text(&quot;• $permission&quot;)&#10;                }&#10;&#10;                Text(&quot;Please enable them in the settings.&quot;)&#10;&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    OutlinedButton(&#10;                        onClick = onDismiss,&#10;                        modifier = Modifier.weight(1f)&#10;                    ) {&#10;                        Text(&quot;Dismiss&quot;)&#10;                    }&#10;&#10;                    Button(&#10;                        onClick = onGrantPermissions,&#10;                        modifier = Modifier.weight(1f)&#10;                    ) {&#10;                        Text(&quot;Settings&quot;)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;private suspend fun testSocket(ipAddress: String, port: Int, message: String, onResult: (String) -&gt; Unit) {&#10;    withContext(Dispatchers.IO) {&#10;        try {&#10;            val socket = Socket(ipAddress, port)&#10;            val output = PrintWriter(socket.getOutputStream(), true)&#10;            val input = BufferedReader(InputStreamReader(socket.getInputStream()))&#10;&#10;            output.println(message)&#10;            val response = input.readLine()&#10;            Log.d(&quot;TCP&quot;, &quot;Received: $response&quot;)&#10;&#10;            socket.close()&#10;&#10;            withContext(Dispatchers.Main) {&#10;                onResult(&quot;Success! Received: $response&quot;)&#10;            }&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;TCP&quot;, &quot;Socket error: ${e.message}&quot;)&#10;            withContext(Dispatchers.Main) {&#10;                onResult(&quot;Error: ${e.message}&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun SocketTestPreview() {&#10;    AirSyncTheme {&#10;        SocketTestScreen()&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.sameerasw.airsync&#10;&#10;import android.content.ComponentName&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.provider.Settings&#10;import android.util.Log&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.window.Dialog&#10;import androidx.compose.ui.text.font.FontWeight&#10;import com.sameerasw.airsync.ui.theme.AirSyncTheme&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.withContext&#10;import java.io.BufferedReader&#10;import java.io.InputStreamReader&#10;import java.io.PrintWriter&#10;import java.net.Socket&#10;&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;&#10;        val data: android.net.Uri? = intent?.data&#10;        val ip = data?.host ?: &quot;192.168.1.100&quot;&#10;        val port = data?.port?.takeIf { it != -1 }?.toString() ?: &quot;6996&quot;&#10;        val isFromQrScan = data != null&#10;&#10;        setContent {&#10;            AirSyncTheme {&#10;                Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding -&gt;&#10;                    SocketTestScreen(&#10;                        modifier = Modifier.padding(innerPadding),&#10;                        initialIp = ip,&#10;                        initialPort = port,&#10;                        showConnectionDialog = isFromQrScan&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun SocketTestScreen(&#10;    modifier: Modifier = Modifier,&#10;    initialIp: String = &quot;192.168.1.100&quot;,&#10;    initialPort: String = &quot;6996&quot;,&#10;    showConnectionDialog: Boolean = false&#10;) {&#10;    val context = LocalContext.current&#10;&#10;    // Get actual device information&#10;    val deviceName = remember { DeviceInfoUtil.getDeviceName(context) }&#10;    val localIp = remember { DeviceInfoUtil.getWifiIpAddress(context) ?: &quot;Unknown&quot; }&#10;&#10;    var ipAddress by remember { mutableStateOf(initialIp) }&#10;    var port by remember { mutableStateOf(initialPort) }&#10;    var deviceNameInput by remember { mutableStateOf(deviceName) }&#10;    var customMessage by remember { mutableStateOf(&quot;{\&quot;type\&quot;:\&quot;notification\&quot;,\&quot;data\&quot;:{\&quot;title\&quot;:\&quot;Test\&quot;,\&quot;body\&quot;:\&quot;Hello!\&quot;,\&quot;app\&quot;:\&quot;WhatsApp\&quot;}}&quot;) }&#10;    var response by remember { mutableStateOf(&quot;&quot;) }&#10;    var isLoading by remember { mutableStateOf(false) }&#10;    var isDialogVisible by remember { mutableStateOf(showConnectionDialog) }&#10;    var showPermissionDialog by remember { mutableStateOf(false) }&#10;    val scope = rememberCoroutineScope()&#10;&#10;    // Use mutableState for permission checks so they can be updated&#10;    var isNotificationEnabled by remember { mutableStateOf(PermissionUtil.isNotificationListenerEnabled(context)) }&#10;    var missingPermissions by remember { mutableStateOf(PermissionUtil.getAllMissingPermissions(context)) }&#10;&#10;    // Update permission status when app resumes or composition recomposes&#10;    LaunchedEffect(Unit) {&#10;        // Initial check&#10;        isNotificationEnabled = PermissionUtil.isNotificationListenerEnabled(context)&#10;        missingPermissions = PermissionUtil.getAllMissingPermissions(context)&#10;&#10;        if (missingPermissions.isNotEmpty()) {&#10;            showPermissionDialog = true&#10;        }&#10;    }&#10;&#10;    // Add a refresh function to check permissions again&#10;    fun refreshPermissions() {&#10;        isNotificationEnabled = PermissionUtil.isNotificationListenerEnabled(context)&#10;        missingPermissions = PermissionUtil.getAllMissingPermissions(context)&#10;    }&#10;&#10;    fun send(message: String) {&#10;        scope.launch {&#10;            testSocket(ipAddress, port.toIntOrNull() ?: 6996, message) { result -&gt;&#10;                response = result&#10;                isLoading = false&#10;            }&#10;        }&#10;        isLoading = true&#10;        response = &quot;&quot;&#10;    }&#10;&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        Text(&quot;AirSync&quot;, style = MaterialTheme.typography.headlineMedium)&#10;&#10;        // Permission Status Card&#10;        if (missingPermissions.isNotEmpty()) {&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.errorContainer)&#10;            ) {&#10;                Column(modifier = Modifier.padding(16.dp)) {&#10;                    Text(&quot;⚠️ Permissions Required&quot;,&#10;                         style = MaterialTheme.typography.titleMedium,&#10;                         color = MaterialTheme.colorScheme.onErrorContainer)&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    Text(&quot;Missing: ${missingPermissions.joinToString(&quot;, &quot;)}&quot;,&#10;                         style = MaterialTheme.typography.bodyMedium,&#10;                         color = MaterialTheme.colorScheme.onErrorContainer)&#10;&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth().padding(top = 8.dp),&#10;                        horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                    ) {&#10;                        Button(&#10;                            onClick = { showPermissionDialog = true },&#10;                            modifier = Modifier.weight(1f),&#10;                            colors = ButtonDefaults.buttonColors(&#10;                                containerColor = MaterialTheme.colorScheme.error&#10;                            )&#10;                        ) {&#10;                            Text(&quot;Grant Permissions&quot;, color = MaterialTheme.colorScheme.onError)&#10;                        }&#10;&#10;                        OutlinedButton(&#10;                            onClick = { refreshPermissions() },&#10;                            modifier = Modifier.weight(1f)&#10;                        ) {&#10;                            Text(&quot;Refresh&quot;)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Device Info Section&#10;        Card(modifier = Modifier.fillMaxWidth()) {&#10;            Column(modifier = Modifier.padding(16.dp)) {&#10;                Text(&quot;Device Information&quot;, style = MaterialTheme.typography.titleMedium)&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                Text(&quot;Local IP: $localIp&quot;, style = MaterialTheme.typography.bodyMedium)&#10;&#10;                // Real-time device status (refresh every time)&#10;                val batteryInfo by rememberUpdatedState(DeviceInfoUtil.getBatteryInfo(context))&#10;                val audioInfo by rememberUpdatedState(DeviceInfoUtil.getAudioInfo(context))&#10;&#10;                Text(&quot;Battery: ${batteryInfo.level}% ${if (batteryInfo.isCharging) &quot;⚡&quot; else &quot;&quot;}&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium)&#10;                Text(&quot;Volume: ${audioInfo.volume}% ${if (audioInfo.isMuted) &quot;&quot; else &quot;&quot;}&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium)&#10;&#10;                // Show media info status with refresh&#10;                if (isNotificationEnabled) {&#10;                    if (audioInfo.title.isNotEmpty()) {&#10;                        Text(&quot; ${audioInfo.title} - ${audioInfo.artist}&quot;,&#10;                             style = MaterialTheme.typography.bodyMedium)&#10;                    } else {&#10;                        Text(&quot; No media playing&quot;, style = MaterialTheme.typography.bodyMedium)&#10;                    }&#10;                } else {&#10;                    Text(&quot; Media info unavailable (permission needed)&quot;,&#10;                         style = MaterialTheme.typography.bodyMedium,&#10;                         color = MaterialTheme.colorScheme.error)&#10;                }&#10;&#10;                OutlinedTextField(&#10;                    value = deviceNameInput,&#10;                    onValueChange = { deviceNameInput = it },&#10;                    label = { Text(&quot;Device Name&quot;) },&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;&#10;                // Add refresh button for testing media detection&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth().padding(top = 8.dp),&#10;                    horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    OutlinedButton(&#10;                        onClick = {&#10;                            refreshPermissions()&#10;                            // Force recomposition to get fresh media info&#10;                        },&#10;                        modifier = Modifier.weight(1f)&#10;                    ) {&#10;                        Text(&quot;Refresh Media&quot;)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Connection Settings&#10;        OutlinedTextField(&#10;            value = ipAddress,&#10;            onValueChange = { ipAddress = it },&#10;            label = { Text(&quot;Desktop IP Address&quot;) },&#10;            modifier = Modifier.fillMaxWidth()&#10;        )&#10;&#10;        OutlinedTextField(&#10;            value = port,&#10;            onValueChange = { port = it },&#10;            label = { Text(&quot;Desktop Port&quot;) },&#10;            modifier = Modifier.fillMaxWidth()&#10;        )&#10;&#10;        HorizontalDivider()&#10;&#10;        Button(&#10;            onClick = {&#10;                val message = JsonUtil.createDeviceInfoJson(deviceNameInput, localIp, port.toIntOrNull() ?: 6996)&#10;                send(message)&#10;            },&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            Text(&quot;Send Device Info&quot;)&#10;        }&#10;&#10;        Button(&#10;            onClick = {&#10;                val message = JsonUtil.createNotificationJson(&quot;Test Message&quot;, &quot;This is a simulated notification.&quot;, &quot;Telegram&quot;)&#10;                send(message)&#10;&#10;            },&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            Text(&quot;Send Notification&quot;)&#10;        }&#10;&#10;        Button(&#10;            onClick = {&#10;                val message = DeviceInfoUtil.generateDeviceStatusJson(context, port.toIntOrNull() ?: 6996)&#10;                send(message)&#10;&#10;            },&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            Text(&quot;Send Device Status&quot;)&#10;        }&#10;&#10;        HorizontalDivider()&#10;&#10;        OutlinedTextField(&#10;            value = customMessage,&#10;            onValueChange = { customMessage = it },&#10;            label = { Text(&quot;Custom Raw JSON&quot;) },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            maxLines = 4&#10;        )&#10;&#10;        Button(&#10;            onClick = { send(customMessage) },&#10;            enabled = !isLoading &amp;&amp; ipAddress.isNotBlank() &amp;&amp; port.isNotBlank() &amp;&amp; customMessage.isNotBlank(),&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            if (isLoading) {&#10;                CircularProgressIndicator(modifier = Modifier.size(16.dp), strokeWidth = 2.dp)&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;            }&#10;            Text(if (isLoading) &quot;Sending...&quot; else &quot;Send Custom Message&quot;)&#10;        }&#10;&#10;        if (response.isNotEmpty()) {&#10;            Card(modifier = Modifier.fillMaxWidth()) {&#10;                Text(response, modifier = Modifier.padding(16.dp))&#10;            }&#10;        }&#10;&#10;        if (isDialogVisible) {&#10;            ConnectionDialog(&#10;                deviceName = deviceNameInput,&#10;                localIp = localIp,&#10;                desktopIp = ipAddress,&#10;                port = port,&#10;                onDismiss = { isDialogVisible = false },&#10;                onConnect = {&#10;                    isDialogVisible = false&#10;                    // Send device info automatically with real device data&#10;                    val message = JsonUtil.createDeviceInfoJson(deviceNameInput, localIp, port.toIntOrNull() ?: 6996)&#10;                    send(message)&#10;                }&#10;            )&#10;        }&#10;&#10;        if (showPermissionDialog) {&#10;            PermissionDialog(&#10;                missingPermissions = missingPermissions,&#10;                onDismiss = { showPermissionDialog = false },&#10;                onGrantPermissions = {&#10;                    PermissionUtil.openNotificationListenerSettings(context)&#10;                    showPermissionDialog = false&#10;                }&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ConnectionDialog(&#10;    deviceName: String,&#10;    localIp: String,&#10;    desktopIp: String,&#10;    port: String,&#10;    onDismiss: () -&gt; Unit,&#10;    onConnect: () -&gt; Unit&#10;) {&#10;    Dialog(onDismissRequest = onDismiss) {&#10;        Surface(&#10;            shape = MaterialTheme.shapes.medium,&#10;            tonalElevation = 3.dp&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .padding(24.dp)&#10;                    .width(280.dp),&#10;                verticalArrangement = Arrangement.spacedBy(16.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;Connect to Desktop?&quot;,&#10;                    style = MaterialTheme.typography.titleMedium.copy(fontWeight = FontWeight.Bold)&#10;                )&#10;&#10;                Text(&quot;Do you want to connect to:&quot;)&#10;                Text(&quot;IP Address: $desktopIp&quot;)&#10;                Text(&quot;Port: $port&quot;)&#10;&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    OutlinedButton(&#10;                        onClick = onDismiss,&#10;                        modifier = Modifier.weight(1f)&#10;                    ) {&#10;                        Text(&quot;Cancel&quot;)&#10;                    }&#10;&#10;                    Button(&#10;                        onClick = onConnect,&#10;                        modifier = Modifier.weight(1f)&#10;                    ) {&#10;                        Text(&quot;Connect&quot;)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun PermissionDialog(&#10;    missingPermissions: List&lt;String&gt;,&#10;    onDismiss: () -&gt; Unit,&#10;    onGrantPermissions: () -&gt; Unit&#10;) {&#10;    Dialog(onDismissRequest = onDismiss) {&#10;        Surface(&#10;            shape = MaterialTheme.shapes.medium,&#10;            tonalElevation = 3.dp&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .padding(24.dp)&#10;                    .width(300.dp),&#10;                verticalArrangement = Arrangement.spacedBy(16.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;Permissions Required&quot;,&#10;                    style = MaterialTheme.typography.titleMedium.copy(fontWeight = FontWeight.Bold)&#10;                )&#10;&#10;                Text(&quot;The following permissions are needed for full functionality:&quot;)&#10;                missingPermissions.forEach { permission -&gt;&#10;                    Text(&quot;• $permission&quot;)&#10;                }&#10;&#10;                Text(&quot;Please enable them in the settings.&quot;)&#10;&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    OutlinedButton(&#10;                        onClick = onDismiss,&#10;                        modifier = Modifier.weight(1f)&#10;                    ) {&#10;                        Text(&quot;Dismiss&quot;)&#10;                    }&#10;&#10;                    Button(&#10;                        onClick = onGrantPermissions,&#10;                        modifier = Modifier.weight(1f)&#10;                    ) {&#10;                        Text(&quot;Settings&quot;)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;private suspend fun testSocket(ipAddress: String, port: Int, message: String, onResult: (String) -&gt; Unit) {&#10;    withContext(Dispatchers.IO) {&#10;        try {&#10;            val socket = Socket(ipAddress, port)&#10;            val output = PrintWriter(socket.getOutputStream(), true)&#10;            val input = BufferedReader(InputStreamReader(socket.getInputStream()))&#10;&#10;            output.println(message)&#10;            val response = input.readLine()&#10;            Log.d(&quot;TCP&quot;, &quot;Received: $response&quot;)&#10;&#10;            socket.close()&#10;&#10;            withContext(Dispatchers.Main) {&#10;                onResult(&quot;Success! Received: $response&quot;)&#10;            }&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;TCP&quot;, &quot;Socket error: ${e.message}&quot;)&#10;            withContext(Dispatchers.Main) {&#10;                onResult(&quot;Error: ${e.message}&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun SocketTestPreview() {&#10;    AirSyncTheme {&#10;        SocketTestScreen()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>