<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#10;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.AirSync&quot;&#10;        tools:targetApi=&quot;31&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:label=&quot;@string/app_name&quot;&#10;            android:theme=&quot;@style/Theme.AirSync&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;                &lt;action android:name=&quot;android.intent.action.VIEW&quot; /&gt;&#10;                &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;&#10;                &lt;category android:name=&quot;android.intent.category.BROWSABLE&quot; /&gt;&#10;                &lt;data android:scheme=&quot;airsync&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_WIFI_STATE&quot; /&gt;&#10;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.AirSync&quot;&#10;        tools:targetApi=&quot;31&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:label=&quot;@string/app_name&quot;&#10;            android:theme=&quot;@style/Theme.AirSync&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;                &lt;action android:name=&quot;android.intent.action.VIEW&quot; /&gt;&#10;                &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;&#10;                &lt;category android:name=&quot;android.intent.category.BROWSABLE&quot; /&gt;&#10;                &lt;data android:scheme=&quot;airsync&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/sameerasw/airsync/DeviceInfoUtil.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/sameerasw/airsync/DeviceInfoUtil.kt" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package com.sameerasw.airsync&#10;&#10;import android.content.Context&#10;import android.net.wifi.WifiManager&#10;import android.os.Build&#10;import android.provider.Settings&#10;import java.net.NetworkInterface&#10;import java.util.*&#10;&#10;object DeviceInfoUtil {&#10;    &#10;    fun getDeviceName(context: Context): String {&#10;        return try {&#10;            Settings.Global.getString(context.contentResolver, Settings.Global.DEVICE_NAME)&#10;                ?: Settings.Secure.getString(context.contentResolver, &quot;bluetooth_name&quot;)&#10;                ?: Build.MODEL&#10;                ?: &quot;Android Device&quot;&#10;        } catch (_: Exception) {&#10;            Build.MODEL ?: &quot;Android Device&quot;&#10;        }&#10;    }&#10;    &#10;    fun getLocalIpAddress(): String? {&#10;        try {&#10;            val interfaces = Collections.list(NetworkInterface.getNetworkInterfaces())&#10;            for (networkInterface in interfaces) {&#10;                val addresses = Collections.list(networkInterface.inetAddresses)&#10;                for (address in addresses) {&#10;                    if (!address.isLoopbackAddress) {&#10;                        val hostAddress = address.hostAddress&#10;                        if (hostAddress != null &amp;&amp; hostAddress.contains(&quot;.&quot;) &amp;&amp; !hostAddress.contains(&quot;:&quot;)) {&#10;                            // IPv4 address&#10;                            return hostAddress&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        } catch (_: Exception) {&#10;            // Ignore exceptions&#10;        }&#10;        return null&#10;    }&#10;    &#10;    @Suppress(&quot;DEPRECATION&quot;)&#10;    fun getWifiIpAddress(context: Context): String? {&#10;        return try {&#10;            val wifiManager = context.applicationContext.getSystemService(Context.WIFI_SERVICE) as WifiManager&#10;            val wifiInfo = wifiManager.connectionInfo&#10;            val ipAddress = wifiInfo.ipAddress&#10;            if (ipAddress != 0) {&#10;                String.format(&#10;                    Locale.US,&#10;                    &quot;%d.%d.%d.%d&quot;,&#10;                    ipAddress and 0xff,&#10;                    ipAddress shr 8 and 0xff,&#10;                    ipAddress shr 16 and 0xff,&#10;                    ipAddress shr 24 and 0xff&#10;                )&#10;            } else {&#10;                getLocalIpAddress()&#10;            }&#10;        } catch (_: Exception) {&#10;            getLocalIpAddress()&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/sameerasw/airsync/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/sameerasw/airsync/MainActivity.kt" />
              <option name="originalContent" value="package com.sameerasw.airsync&#10;&#10;import android.os.Bundle&#10;import android.util.Log&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.window.Dialog&#10;import androidx.compose.ui.text.font.FontWeight&#10;import com.sameerasw.airsync.ui.theme.AirSyncTheme&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.withContext&#10;import java.io.BufferedReader&#10;import java.io.InputStreamReader&#10;import java.io.PrintWriter&#10;import java.net.Socket&#10;&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;&#10;        val data: android.net.Uri? = intent?.data&#10;        val ip = data?.host ?: &quot;192.168.1.100&quot;&#10;        val port = data?.port?.takeIf { it != -1 }?.toString() ?: &quot;6996&quot;&#10;        val isFromQrScan = data != null&#10;&#10;        setContent {&#10;            AirSyncTheme {&#10;                Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding -&gt;&#10;                    SocketTestScreen(&#10;                        modifier = Modifier.padding(innerPadding),&#10;                        initialIp = ip,&#10;                        initialPort = port,&#10;                        showConnectionDialog = isFromQrScan&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun SocketTestScreen(&#10;    modifier: Modifier = Modifier,&#10;    initialIp: String = &quot;192.168.1.100&quot;,&#10;    initialPort: String = &quot;6996&quot;,&#10;    showConnectionDialog: Boolean = false&#10;) {&#10;    var ipAddress by remember { mutableStateOf(initialIp) }&#10;    var port by remember { mutableStateOf(initialPort) }&#10;    var customMessage by remember { mutableStateOf(&quot;{\&quot;type\&quot;:\&quot;notification\&quot;,\&quot;data\&quot;:{\&quot;title\&quot;:\&quot;Test\&quot;,\&quot;body\&quot;:\&quot;Hello!\&quot;,\&quot;app\&quot;:\&quot;WhatsApp\&quot;}}&quot;) }&#10;    var response by remember { mutableStateOf(&quot;&quot;) }&#10;    var isLoading by remember { mutableStateOf(false) }&#10;    var isDialogVisible by remember { mutableStateOf(showConnectionDialog) }&#10;    val scope = rememberCoroutineScope()&#10;&#10;    fun send(message: String) {&#10;        scope.launch {&#10;            testSocket(ipAddress, port.toIntOrNull() ?: 6996, message) { result -&gt;&#10;                response = result&#10;                isLoading = false&#10;            }&#10;        }&#10;        isLoading = true&#10;        response = &quot;&quot;&#10;    }&#10;&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        Text(&quot;AirSync Tester&quot;, style = MaterialTheme.typography.headlineMedium)&#10;&#10;        OutlinedTextField(&#10;            value = ipAddress,&#10;            onValueChange = { ipAddress = it },&#10;            label = { Text(&quot;IP Address&quot;) },&#10;            modifier = Modifier.fillMaxWidth()&#10;        )&#10;&#10;        OutlinedTextField(&#10;            value = port,&#10;            onValueChange = { port = it },&#10;            label = { Text(&quot;Port&quot;) },&#10;            modifier = Modifier.fillMaxWidth()&#10;        )&#10;&#10;        HorizontalDivider()&#10;&#10;        Button(&#10;            onClick = {&#10;                val message = &quot;&quot;&quot;{&quot;type&quot;:&quot;device&quot;,&quot;data&quot;:{&quot;name&quot;:&quot;Pixel 8 Pro&quot;,&quot;ipAddress&quot;:&quot;$ipAddress&quot;,&quot;port&quot;:${port.toIntOrNull() ?: 6996}}}&quot;&quot;&quot;&#10;                send(message)&#10;&#10;            },&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            Text(&quot;Send Device Info&quot;)&#10;        }&#10;&#10;        Button(&#10;            onClick = {&#10;                val message = &quot;&quot;&quot;{&quot;type&quot;:&quot;notification&quot;,&quot;data&quot;:{&quot;title&quot;:&quot;Test Message&quot;,&quot;body&quot;:&quot;This is a simulated notification.&quot;,&quot;app&quot;:&quot;Telegram&quot;}}&quot;&quot;&quot;&#10;                send(message)&#10;&#10;            },&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            Text(&quot;Send Notification&quot;)&#10;        }&#10;&#10;        Button(&#10;            onClick = {&#10;                val message = &quot;&quot;&quot;{&quot;type&quot;:&quot;status&quot;,&quot;data&quot;:{&quot;battery&quot;:{&quot;level&quot;:42,&quot;isCharging&quot;:false},&quot;isPaired&quot;:true,&quot;music&quot;:{&quot;isPlaying&quot;:true,&quot;title&quot;:&quot;Test Song&quot;,&quot;artist&quot;:&quot;Test Artist&quot;,&quot;volume&quot;:70,&quot;isMuted&quot;:false}}}&quot;&quot;&quot;&#10;                send(message)&#10;&#10;            },&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            Text(&quot;Send Device Status&quot;)&#10;        }&#10;&#10;        HorizontalDivider()&#10;&#10;        OutlinedTextField(&#10;            value = customMessage,&#10;            onValueChange = { customMessage = it },&#10;            label = { Text(&quot;Custom Raw JSON&quot;) },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            maxLines = 4&#10;        )&#10;&#10;        Button(&#10;            onClick = { send(customMessage) },&#10;            enabled = !isLoading &amp;&amp; ipAddress.isNotBlank() &amp;&amp; port.isNotBlank() &amp;&amp; customMessage.isNotBlank(),&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            if (isLoading) {&#10;                CircularProgressIndicator(modifier = Modifier.size(16.dp), strokeWidth = 2.dp)&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;            }&#10;            Text(if (isLoading) &quot;Sending...&quot; else &quot;Send Custom Message&quot;)&#10;        }&#10;&#10;        if (response.isNotEmpty()) {&#10;            Card(modifier = Modifier.fillMaxWidth()) {&#10;                Text(response, modifier = Modifier.padding(16.dp))&#10;            }&#10;        }&#10;&#10;        if (isDialogVisible) {&#10;            ConnectionDialog(&#10;                ipAddress = ipAddress,&#10;                port = port,&#10;                onDismiss = { isDialogVisible = false },&#10;                onConnect = {&#10;                    isDialogVisible = false&#10;                    // Send device info automatically&#10;                    val message = &quot;&quot;&quot;{&quot;type&quot;:&quot;device&quot;,&quot;data&quot;:{&quot;name&quot;:&quot;Pixel 8 Pro&quot;,&quot;ipAddress&quot;:&quot;$ipAddress&quot;,&quot;port&quot;:${port.toIntOrNull() ?: 6996}}}&quot;&quot;&quot;&#10;                    send(message)&#10;                }&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ConnectionDialog(&#10;    ipAddress: String,&#10;    port: String,&#10;    onDismiss: () -&gt; Unit,&#10;    onConnect: () -&gt; Unit&#10;) {&#10;    Dialog(onDismissRequest = onDismiss) {&#10;        Surface(&#10;            shape = MaterialTheme.shapes.medium,&#10;            tonalElevation = 3.dp&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .padding(24.dp)&#10;                    .width(280.dp),&#10;                verticalArrangement = Arrangement.spacedBy(16.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;Connect to Desktop?&quot;,&#10;                    style = MaterialTheme.typography.titleMedium.copy(fontWeight = FontWeight.Bold)&#10;                )&#10;&#10;                Text(&quot;Do you want to connect to:&quot;)&#10;                Text(&quot;IP Address: $ipAddress&quot;)&#10;                Text(&quot;Port: $port&quot;)&#10;&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    OutlinedButton(&#10;                        onClick = onDismiss,&#10;                        modifier = Modifier.weight(1f)&#10;                    ) {&#10;                        Text(&quot;Cancel&quot;)&#10;                    }&#10;&#10;                    Button(&#10;                        onClick = onConnect,&#10;                        modifier = Modifier.weight(1f)&#10;                    ) {&#10;                        Text(&quot;Connect&quot;)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;private suspend fun testSocket(ipAddress: String, port: Int, message: String, onResult: (String) -&gt; Unit) {&#10;    withContext(Dispatchers.IO) {&#10;        try {&#10;            val socket = Socket(ipAddress, port)&#10;            val output = PrintWriter(socket.getOutputStream(), true)&#10;            val input = BufferedReader(InputStreamReader(socket.getInputStream()))&#10;&#10;            output.println(message)&#10;            val response = input.readLine()&#10;            Log.d(&quot;TCP&quot;, &quot;Received: $response&quot;)&#10;&#10;            socket.close()&#10;&#10;            withContext(Dispatchers.Main) {&#10;                onResult(&quot;Success! Received: $response&quot;)&#10;            }&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;TCP&quot;, &quot;Socket error: ${e.message}&quot;)&#10;            withContext(Dispatchers.Main) {&#10;                onResult(&quot;Error: ${e.message}&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun SocketTestPreview() {&#10;    AirSyncTheme {&#10;        SocketTestScreen()&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.sameerasw.airsync&#10;&#10;import android.content.Context&#10;import android.os.Bundle&#10;import android.util.Log&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.window.Dialog&#10;import androidx.compose.ui.text.font.FontWeight&#10;import com.sameerasw.airsync.ui.theme.AirSyncTheme&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.withContext&#10;import java.io.BufferedReader&#10;import java.io.InputStreamReader&#10;import java.io.PrintWriter&#10;import java.net.Socket&#10;&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;&#10;        val data: android.net.Uri? = intent?.data&#10;        val ip = data?.host ?: &quot;192.168.1.100&quot;&#10;        val port = data?.port?.takeIf { it != -1 }?.toString() ?: &quot;6996&quot;&#10;        val isFromQrScan = data != null&#10;&#10;        setContent {&#10;            AirSyncTheme {&#10;                Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding -&gt;&#10;                    SocketTestScreen(&#10;                        modifier = Modifier.padding(innerPadding),&#10;                        initialIp = ip,&#10;                        initialPort = port,&#10;                        showConnectionDialog = isFromQrScan&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun SocketTestScreen(&#10;    modifier: Modifier = Modifier,&#10;    initialIp: String = &quot;192.168.1.100&quot;,&#10;    initialPort: String = &quot;6996&quot;,&#10;    showConnectionDialog: Boolean = false&#10;) {&#10;    val context = LocalContext.current&#10;    &#10;    // Get actual device information&#10;    val deviceName = remember { DeviceInfoUtil.getDeviceName(context) }&#10;    val localIp = remember { DeviceInfoUtil.getWifiIpAddress(context) ?: &quot;Unknown&quot; }&#10;    &#10;    var ipAddress by remember { mutableStateOf(initialIp) }&#10;    var port by remember { mutableStateOf(initialPort) }&#10;    var deviceNameInput by remember { mutableStateOf(deviceName) }&#10;    var customMessage by remember { mutableStateOf(&quot;{\&quot;type\&quot;:\&quot;notification\&quot;,\&quot;data\&quot;:{\&quot;title\&quot;:\&quot;Test\&quot;,\&quot;body\&quot;:\&quot;Hello!\&quot;,\&quot;app\&quot;:\&quot;WhatsApp\&quot;}}&quot;) }&#10;    var response by remember { mutableStateOf(&quot;&quot;) }&#10;    var isLoading by remember { mutableStateOf(false) }&#10;    var isDialogVisible by remember { mutableStateOf(showConnectionDialog) }&#10;    val scope = rememberCoroutineScope()&#10;&#10;    fun send(message: String) {&#10;        scope.launch {&#10;            testSocket(ipAddress, port.toIntOrNull() ?: 6996, message) { result -&gt;&#10;                response = result&#10;                isLoading = false&#10;            }&#10;        }&#10;        isLoading = true&#10;        response = &quot;&quot;&#10;    }&#10;&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        Text(&quot;AirSync&quot;, style = MaterialTheme.typography.headlineMedium)&#10;        &#10;        // Device Info Section&#10;        Card(modifier = Modifier.fillMaxWidth()) {&#10;            Column(modifier = Modifier.padding(16.dp)) {&#10;                Text(&quot;Device Information&quot;, style = MaterialTheme.typography.titleMedium)&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                Text(&quot;Local IP: $localIp&quot;, style = MaterialTheme.typography.bodyMedium)&#10;                &#10;                OutlinedTextField(&#10;                    value = deviceNameInput,&#10;                    onValueChange = { deviceNameInput = it },&#10;                    label = { Text(&quot;Device Name&quot;) },&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;            }&#10;        }&#10;&#10;        // Connection Settings&#10;        OutlinedTextField(&#10;            value = ipAddress,&#10;            onValueChange = { ipAddress = it },&#10;            label = { Text(&quot;Desktop IP Address&quot;) },&#10;            modifier = Modifier.fillMaxWidth()&#10;        )&#10;&#10;        OutlinedTextField(&#10;            value = port,&#10;            onValueChange = { port = it },&#10;            label = { Text(&quot;Desktop Port&quot;) },&#10;            modifier = Modifier.fillMaxWidth()&#10;        )&#10;&#10;        HorizontalDivider()&#10;&#10;        Button(&#10;            onClick = {&#10;                val message = &quot;&quot;&quot;{&quot;type&quot;:&quot;device&quot;,&quot;data&quot;:{&quot;name&quot;:&quot;$deviceNameInput&quot;,&quot;ipAddress&quot;:&quot;$localIp&quot;,&quot;port&quot;:${port.toIntOrNull() ?: 6996}}}&quot;&quot;&quot;&#10;                send(message)&#10;            },&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            Text(&quot;Send Device Info&quot;)&#10;        }&#10;&#10;        Button(&#10;            onClick = {&#10;                val message = &quot;&quot;&quot;{&quot;type&quot;:&quot;notification&quot;,&quot;data&quot;:{&quot;title&quot;:&quot;Test Message&quot;,&quot;body&quot;:&quot;This is a simulated notification.&quot;,&quot;app&quot;:&quot;Telegram&quot;}}&quot;&quot;&quot;&#10;                send(message)&#10;&#10;            },&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            Text(&quot;Send Notification&quot;)&#10;        }&#10;&#10;        Button(&#10;            onClick = {&#10;                val message = &quot;&quot;&quot;{&quot;type&quot;:&quot;status&quot;,&quot;data&quot;:{&quot;battery&quot;:{&quot;level&quot;:42,&quot;isCharging&quot;:false},&quot;isPaired&quot;:true,&quot;music&quot;:{&quot;isPlaying&quot;:true,&quot;title&quot;:&quot;Test Song&quot;,&quot;artist&quot;:&quot;Test Artist&quot;,&quot;volume&quot;:70,&quot;isMuted&quot;:false}}}&quot;&quot;&quot;&#10;                send(message)&#10;&#10;            },&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            Text(&quot;Send Device Status&quot;)&#10;        }&#10;&#10;        HorizontalDivider()&#10;&#10;        OutlinedTextField(&#10;            value = customMessage,&#10;            onValueChange = { customMessage = it },&#10;            label = { Text(&quot;Custom Raw JSON&quot;) },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            maxLines = 4&#10;        )&#10;&#10;        Button(&#10;            onClick = { send(customMessage) },&#10;            enabled = !isLoading &amp;&amp; ipAddress.isNotBlank() &amp;&amp; port.isNotBlank() &amp;&amp; customMessage.isNotBlank(),&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            if (isLoading) {&#10;                CircularProgressIndicator(modifier = Modifier.size(16.dp), strokeWidth = 2.dp)&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;            }&#10;            Text(if (isLoading) &quot;Sending...&quot; else &quot;Send Custom Message&quot;)&#10;        }&#10;&#10;        if (response.isNotEmpty()) {&#10;            Card(modifier = Modifier.fillMaxWidth()) {&#10;                Text(response, modifier = Modifier.padding(16.dp))&#10;            }&#10;        }&#10;&#10;        if (isDialogVisible) {&#10;            ConnectionDialog(&#10;                deviceName = deviceNameInput,&#10;                localIp = localIp,&#10;                desktopIp = ipAddress,&#10;                port = port,&#10;                onDismiss = { isDialogVisible = false },&#10;                onConnect = {&#10;                    isDialogVisible = false&#10;                    // Send device info automatically with real device data&#10;                    val message = &quot;&quot;&quot;{&quot;type&quot;:&quot;device&quot;,&quot;data&quot;:{&quot;name&quot;:&quot;$deviceNameInput&quot;,&quot;ipAddress&quot;:&quot;$localIp&quot;,&quot;port&quot;:${port.toIntOrNull() ?: 6996}}}&quot;&quot;&quot;&#10;                    send(message)&#10;                }&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ConnectionDialog(&#10;    deviceName: String,&#10;    localIp: String,&#10;    desktopIp: String,&#10;    port: String,&#10;    onDismiss: () -&gt; Unit,&#10;    onConnect: () -&gt; Unit&#10;) {&#10;    Dialog(onDismissRequest = onDismiss) {&#10;        Surface(&#10;            shape = MaterialTheme.shapes.medium,&#10;            tonalElevation = 3.dp&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .padding(24.dp)&#10;                    .width(280.dp),&#10;                verticalArrangement = Arrangement.spacedBy(16.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;Connect to Desktop?&quot;,&#10;                    style = MaterialTheme.typography.titleMedium.copy(fontWeight = FontWeight.Bold)&#10;                )&#10;&#10;                Text(&quot;Do you want to connect to:&quot;)&#10;                Text(&quot;IP Address: $desktopIp&quot;)&#10;                Text(&quot;Port: $port&quot;)&#10;&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    OutlinedButton(&#10;                        onClick = onDismiss,&#10;                        modifier = Modifier.weight(1f)&#10;                    ) {&#10;                        Text(&quot;Cancel&quot;)&#10;                    }&#10;&#10;                    Button(&#10;                        onClick = onConnect,&#10;                        modifier = Modifier.weight(1f)&#10;                    ) {&#10;                        Text(&quot;Connect&quot;)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;private suspend fun testSocket(ipAddress: String, port: Int, message: String, onResult: (String) -&gt; Unit) {&#10;    withContext(Dispatchers.IO) {&#10;        try {&#10;            val socket = Socket(ipAddress, port)&#10;            val output = PrintWriter(socket.getOutputStream(), true)&#10;            val input = BufferedReader(InputStreamReader(socket.getInputStream()))&#10;&#10;            output.println(message)&#10;            val response = input.readLine()&#10;            Log.d(&quot;TCP&quot;, &quot;Received: $response&quot;)&#10;&#10;            socket.close()&#10;&#10;            withContext(Dispatchers.Main) {&#10;                onResult(&quot;Success! Received: $response&quot;)&#10;            }&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;TCP&quot;, &quot;Socket error: ${e.message}&quot;)&#10;            withContext(Dispatchers.Main) {&#10;                onResult(&quot;Error: ${e.message}&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun SocketTestPreview() {&#10;    AirSyncTheme {&#10;        SocketTestScreen()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>