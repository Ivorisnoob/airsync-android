<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.AirSync&quot;&#10;        tools:targetApi=&quot;31&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:label=&quot;@string/app_name&quot;&#10;            android:theme=&quot;@style/Theme.AirSync&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#10;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.AirSync&quot;&#10;        tools:targetApi=&quot;31&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:label=&quot;@string/app_name&quot;&#10;            android:theme=&quot;@style/Theme.AirSync&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/sameerasw/airsync/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/sameerasw/airsync/MainActivity.kt" />
              <option name="originalContent" value="package com.sameerasw.airsync&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import com.sameerasw.airsync.ui.theme.AirSyncTheme&#10;&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            AirSyncTheme {&#10;                Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding -&gt;&#10;                    Greeting(&#10;                        name = &quot;Android&quot;,&#10;                        modifier = Modifier.padding(innerPadding)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun Greeting(name: String, modifier: Modifier = Modifier) {&#10;    Text(&#10;        text = &quot;Hello $name!&quot;,&#10;        modifier = modifier&#10;    )&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun GreetingPreview() {&#10;    AirSyncTheme {&#10;        Greeting(&quot;Android&quot;)&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.sameerasw.airsync&#10;&#10;import android.os.Bundle&#10;import android.util.Log&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import com.sameerasw.airsync.ui.theme.AirSyncTheme&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.withContext&#10;import java.io.BufferedReader&#10;import java.io.InputStreamReader&#10;import java.io.PrintWriter&#10;import java.net.Socket&#10;&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            AirSyncTheme {&#10;                Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding -&gt;&#10;                    SocketTestScreen(&#10;                        modifier = Modifier.padding(innerPadding)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun SocketTestScreen(modifier: Modifier = Modifier) {&#10;    var ipAddress by remember { mutableStateOf(&quot;192.168.1.100&quot;) }&#10;    var port by remember { mutableStateOf(&quot;6996&quot;) }&#10;    var message by remember { mutableStateOf(&quot;Hello from Android!&quot;) }&#10;    var response by remember { mutableStateOf(&quot;&quot;) }&#10;    var isLoading by remember { mutableStateOf(false) }&#10;    val scope = rememberCoroutineScope()&#10;&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        Text(&#10;            text = &quot;Socket Test&quot;,&#10;            style = MaterialTheme.typography.headlineMedium&#10;        )&#10;&#10;        OutlinedTextField(&#10;            value = ipAddress,&#10;            onValueChange = { ipAddress = it },&#10;            label = { Text(&quot;IP Address&quot;) },&#10;            placeholder = { Text(&quot;192.168.x.x&quot;) },&#10;            modifier = Modifier.fillMaxWidth()&#10;        )&#10;&#10;        OutlinedTextField(&#10;            value = port,&#10;            onValueChange = { port = it },&#10;            label = { Text(&quot;Port&quot;) },&#10;            placeholder = { Text(&quot;6996&quot;) },&#10;            modifier = Modifier.fillMaxWidth()&#10;        )&#10;&#10;        OutlinedTextField(&#10;            value = message,&#10;            onValueChange = { message = it },&#10;            label = { Text(&quot;Message&quot;) },&#10;            placeholder = { Text(&quot;Hello from Android!&quot;) },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            maxLines = 3&#10;        )&#10;&#10;        Button(&#10;            onClick = {&#10;                scope.launch {&#10;                    testSocket(ipAddress, port.toIntOrNull() ?: 6996, message) { result -&gt;&#10;                        response = result&#10;                        isLoading = false&#10;                    }&#10;                }&#10;                isLoading = true&#10;                response = &quot;&quot;&#10;            },&#10;            enabled = !isLoading &amp;&amp; ipAddress.isNotBlank() &amp;&amp; port.isNotBlank() &amp;&amp; message.isNotBlank(),&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            if (isLoading) {&#10;                CircularProgressIndicator(&#10;                    modifier = Modifier.size(16.dp),&#10;                    strokeWidth = 2.dp&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;            }&#10;            Text(if (isLoading) &quot;Testing...&quot; else &quot;Test Socket Connection&quot;)&#10;        }&#10;&#10;        if (response.isNotEmpty()) {&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Text(&#10;                    text = response,&#10;                    modifier = Modifier.padding(16.dp),&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;private suspend fun testSocket(ipAddress: String, port: Int, message: String, onResult: (String) -&gt; Unit) {&#10;    withContext(Dispatchers.IO) {&#10;        try {&#10;            val socket = Socket(ipAddress, port)&#10;            val output = PrintWriter(socket.getOutputStream(), true)&#10;            val input = BufferedReader(InputStreamReader(socket.getInputStream()))&#10;&#10;            output.println(message)&#10;            val response = input.readLine()&#10;            Log.d(&quot;TCP&quot;, &quot;Received: $response&quot;)&#10;&#10;            socket.close()&#10;&#10;            withContext(Dispatchers.Main) {&#10;                onResult(&quot;Success! Received: $response&quot;)&#10;            }&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;TCP&quot;, &quot;Socket error: ${e.message}&quot;)&#10;            withContext(Dispatchers.Main) {&#10;                onResult(&quot;Error: ${e.message}&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun SocketTestPreview() {&#10;    AirSyncTheme {&#10;        SocketTestScreen()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>