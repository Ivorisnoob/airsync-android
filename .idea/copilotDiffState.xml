<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.sameerasw.airsync&quot;&#10;    compileSdk = 35&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.sameerasw.airsync&quot;&#10;        minSdk = 32&#10;        targetSdk = 35&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;}" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.sameerasw.airsync&quot;&#10;    compileSdk = 35&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.sameerasw.airsync&quot;&#10;        minSdk = 32&#10;        targetSdk = 35&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;&#10;    // DataStore for state persistence&#10;    implementation(&quot;androidx.datastore:datastore-preferences:1.1.1&quot;)&#10;    implementation(&quot;androidx.datastore:datastore-core:1.1.1&quot;)&#10;&#10;    // ViewModel and state handling&#10;    implementation(&quot;androidx.lifecycle:lifecycle-viewmodel-compose:2.8.4&quot;)&#10;    implementation(&quot;androidx.compose.runtime:runtime-livedata:1.7.0&quot;)&#10;&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_WIFI_STATE&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.BATTERY_STATS&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.MODIFY_AUDIO_SETTINGS&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.BIND_NOTIFICATION_LISTENER_SERVICE&quot; /&gt;&#10;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.AirSync&quot;&#10;        tools:targetApi=&quot;31&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:label=&quot;@string/app_name&quot;&#10;            android:theme=&quot;@style/Theme.AirSync&quot;&gt;&#10;            &lt;!-- Main launcher intent filter --&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;&#10;            &lt;!-- Deep link intent filter for QR codes --&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.VIEW&quot; /&gt;&#10;                &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;&#10;                &lt;category android:name=&quot;android.intent.category.BROWSABLE&quot; /&gt;&#10;                &lt;data android:scheme=&quot;airsync&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;&#10;        &lt;service&#10;            android:name=&quot;.MediaNotificationListener&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:permission=&quot;android.permission.BIND_NOTIFICATION_LISTENER_SERVICE&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.service.notification.NotificationListenerService&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/service&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_WIFI_STATE&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.BATTERY_STATS&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.MODIFY_AUDIO_SETTINGS&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.BIND_NOTIFICATION_LISTENER_SERVICE&quot; /&gt;&#10;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.AirSync&quot;&#10;        tools:targetApi=&quot;31&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:label=&quot;@string/app_name&quot;&#10;            android:theme=&quot;@style/Theme.AirSync&quot;&#10;            android:configChanges=&quot;orientation|screenSize|screenLayout|keyboardHidden&quot;&gt;&#10;            &lt;!-- Main launcher intent filter --&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;&#10;            &lt;!-- Deep link intent filter for QR codes --&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.VIEW&quot; /&gt;&#10;                &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;&#10;                &lt;category android:name=&quot;android.intent.category.BROWSABLE&quot; /&gt;&#10;                &lt;data android:scheme=&quot;airsync&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;&#10;        &lt;service&#10;            android:name=&quot;.MediaNotificationListener&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:permission=&quot;android.permission.BIND_NOTIFICATION_LISTENER_SERVICE&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.service.notification.NotificationListenerService&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/service&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/sameerasw/airsync/AirSyncViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/sameerasw/airsync/AirSyncViewModel.kt" />
              <option name="originalContent" value="&#10;&#10;&#10;" />
              <option name="updatedContent" value="package com.sameerasw.airsync&#10;&#10;import android.content.Context&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.flow.first&#10;import kotlinx.coroutines.launch&#10;&#10;class AirSyncViewModel : ViewModel() {&#10;    &#10;    // UI State&#10;    private val _uiState = MutableStateFlow(AirSyncUiState())&#10;    val uiState: StateFlow&lt;AirSyncUiState&gt; = _uiState.asStateFlow()&#10;&#10;    // Device info&#10;    private val _deviceInfo = MutableStateFlow(DeviceInfo())&#10;    val deviceInfo: StateFlow&lt;DeviceInfo&gt; = _deviceInfo.asStateFlow()&#10;&#10;    fun initializeState(context: Context, initialIp: String?, initialPort: String?, showConnectionDialog: Boolean) {&#10;        viewModelScope.launch {&#10;            try {&#10;                // Load saved data from DataStore&#10;                val savedIp = DataStoreUtil.getIpAddress(context).first()&#10;                val savedPort = DataStoreUtil.getPort(context).first()&#10;                val savedDeviceName = DataStoreUtil.getDeviceName(context).first()&#10;                val savedCustomMessage = DataStoreUtil.getCustomMessage(context).first()&#10;                val isFirstRun = DataStoreUtil.getFirstRun(context).first()&#10;                val permissionsChecked = DataStoreUtil.getPermissionsChecked(context).first()&#10;&#10;                // Get device information&#10;                val deviceName = if (savedDeviceName.isEmpty()) {&#10;                    DeviceInfoUtil.getDeviceName(context)&#10;                } else {&#10;                    savedDeviceName&#10;                }&#10;                val localIp = DeviceInfoUtil.getWifiIpAddress(context) ?: &quot;Unknown&quot;&#10;&#10;                // Update device info&#10;                _deviceInfo.value = DeviceInfo(&#10;                    name = deviceName,&#10;                    localIp = localIp&#10;                )&#10;&#10;                // Use initial values from QR scan if provided, otherwise use saved values&#10;                val ipToUse = initialIp ?: savedIp&#10;                val portToUse = initialPort ?: savedPort&#10;&#10;                // Update UI state&#10;                _uiState.value = _uiState.value.copy(&#10;                    ipAddress = ipToUse,&#10;                    port = portToUse,&#10;                    deviceNameInput = deviceName,&#10;                    customMessage = savedCustomMessage,&#10;                    isDialogVisible = showConnectionDialog,&#10;                    showPermissionDialog = !permissionsChecked &amp;&amp; isFirstRun,&#10;                    isNotificationEnabled = PermissionUtil.isNotificationListenerEnabled(context),&#10;                    missingPermissions = PermissionUtil.getAllMissingPermissions(context)&#10;                )&#10;&#10;                // Save the current values if they came from QR scan&#10;                if (initialIp != null) {&#10;                    DataStoreUtil.saveIpAddress(context, ipToUse)&#10;                }&#10;                if (initialPort != null) {&#10;                    DataStoreUtil.savePort(context, portToUse)&#10;                }&#10;                if (savedDeviceName.isEmpty()) {&#10;                    DataStoreUtil.saveDeviceName(context, deviceName)&#10;                }&#10;&#10;                // Mark as not first run anymore&#10;                if (isFirstRun) {&#10;                    DataStoreUtil.setFirstRun(context, false)&#10;                }&#10;&#10;            } catch (e: Exception) {&#10;                // Handle initialization error&#10;                _uiState.value = _uiState.value.copy(&#10;                    response = &quot;Error initializing app: ${e.message}&quot;&#10;                )&#10;            }&#10;        }&#10;    }&#10;&#10;    fun updateIpAddress(context: Context, ip: String) {&#10;        _uiState.value = _uiState.value.copy(ipAddress = ip)&#10;        viewModelScope.launch {&#10;            DataStoreUtil.saveIpAddress(context, ip)&#10;        }&#10;    }&#10;&#10;    fun updatePort(context: Context, port: String) {&#10;        _uiState.value = _uiState.value.copy(port = port)&#10;        viewModelScope.launch {&#10;            DataStoreUtil.savePort(context, port)&#10;        }&#10;    }&#10;&#10;    fun updateDeviceName(context: Context, name: String) {&#10;        _uiState.value = _uiState.value.copy(deviceNameInput = name)&#10;        _deviceInfo.value = _deviceInfo.value.copy(name = name)&#10;        viewModelScope.launch {&#10;            DataStoreUtil.saveDeviceName(context, name)&#10;        }&#10;    }&#10;&#10;    fun updateCustomMessage(context: Context, message: String) {&#10;        _uiState.value = _uiState.value.copy(customMessage = message)&#10;        viewModelScope.launch {&#10;            DataStoreUtil.saveCustomMessage(context, message)&#10;        }&#10;    }&#10;&#10;    fun setLoading(isLoading: Boolean) {&#10;        _uiState.value = _uiState.value.copy(isLoading = isLoading)&#10;    }&#10;&#10;    fun setResponse(response: String) {&#10;        _uiState.value = _uiState.value.copy(response = response)&#10;    }&#10;&#10;    fun setDialogVisible(visible: Boolean) {&#10;        _uiState.value = _uiState.value.copy(isDialogVisible = visible)&#10;    }&#10;&#10;    fun setPermissionDialogVisible(visible: Boolean) {&#10;        _uiState.value = _uiState.value.copy(showPermissionDialog = visible)&#10;    }&#10;&#10;    fun refreshPermissions(context: Context) {&#10;        val isNotificationEnabled = PermissionUtil.isNotificationListenerEnabled(context)&#10;        val missingPermissions = PermissionUtil.getAllMissingPermissions(context)&#10;        &#10;        _uiState.value = _uiState.value.copy(&#10;            isNotificationEnabled = isNotificationEnabled,&#10;            missingPermissions = missingPermissions&#10;        )&#10;&#10;        // Save that permissions have been checked&#10;        viewModelScope.launch {&#10;            DataStoreUtil.setPermissionsChecked(context, true)&#10;        }&#10;    }&#10;&#10;    fun refreshDeviceInfo(context: Context) {&#10;        val localIp = DeviceInfoUtil.getWifiIpAddress(context) ?: &quot;Unknown&quot;&#10;        _deviceInfo.value = _deviceInfo.value.copy(localIp = localIp)&#10;    }&#10;}&#10;&#10;data class AirSyncUiState(&#10;    val ipAddress: String = &quot;192.168.1.100&quot;,&#10;    val port: String = &quot;6996&quot;,&#10;    val deviceNameInput: String = &quot;&quot;,&#10;    val customMessage: String = &quot;&quot;&quot;{&quot;type&quot;:&quot;notification&quot;,&quot;data&quot;:{&quot;title&quot;:&quot;Test&quot;,&quot;body&quot;:&quot;Hello!&quot;,&quot;app&quot;:&quot;WhatsApp&quot;}}&quot;&quot;&quot;,&#10;    val response: String = &quot;&quot;,&#10;    val isLoading: Boolean = false,&#10;    val isDialogVisible: Boolean = false,&#10;    val showPermissionDialog: Boolean = false,&#10;    val isNotificationEnabled: Boolean = false,&#10;    val missingPermissions: List&lt;String&gt; = emptyList()&#10;)&#10;&#10;data class DeviceInfo(&#10;    val name: String = &quot;&quot;,&#10;    val localIp: String = &quot;Unknown&quot;&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/sameerasw/airsync/DataStoreUtil.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/sameerasw/airsync/DataStoreUtil.kt" />
              <option name="originalContent" value="&#10;&#10;" />
              <option name="updatedContent" value="package com.sameerasw.airsync&#10;&#10;import android.content.Context&#10;import androidx.datastore.core.DataStore&#10;import androidx.datastore.preferences.core.Preferences&#10;import androidx.datastore.preferences.core.booleanPreferencesKey&#10;import androidx.datastore.preferences.core.edit&#10;import androidx.datastore.preferences.core.stringPreferencesKey&#10;import androidx.datastore.preferences.preferencesDataStore&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.map&#10;&#10;val Context.dataStore: DataStore&lt;Preferences&gt; by preferencesDataStore(name = &quot;airsync_settings&quot;)&#10;&#10;object DataStoreUtil {&#10;    private val IP_ADDRESS = stringPreferencesKey(&quot;ip_address&quot;)&#10;    private val PORT = stringPreferencesKey(&quot;port&quot;)&#10;    private val DEVICE_NAME = stringPreferencesKey(&quot;device_name&quot;)&#10;    private val CUSTOM_MESSAGE = stringPreferencesKey(&quot;custom_message&quot;)&#10;    private val FIRST_RUN = booleanPreferencesKey(&quot;first_run&quot;)&#10;    private val PERMISSIONS_CHECKED = booleanPreferencesKey(&quot;permissions_checked&quot;)&#10;&#10;    suspend fun saveIpAddress(context: Context, ipAddress: String) {&#10;        context.dataStore.edit { preferences -&gt;&#10;            preferences[IP_ADDRESS] = ipAddress&#10;        }&#10;    }&#10;&#10;    fun getIpAddress(context: Context): Flow&lt;String&gt; {&#10;        return context.dataStore.data.map { preferences -&gt;&#10;            preferences[IP_ADDRESS] ?: &quot;192.168.1.100&quot;&#10;        }&#10;    }&#10;&#10;    suspend fun savePort(context: Context, port: String) {&#10;        context.dataStore.edit { preferences -&gt;&#10;            preferences[PORT] = port&#10;        }&#10;    }&#10;&#10;    fun getPort(context: Context): Flow&lt;String&gt; {&#10;        return context.dataStore.data.map { preferences -&gt;&#10;            preferences[PORT] ?: &quot;6996&quot;&#10;        }&#10;    }&#10;&#10;    suspend fun saveDeviceName(context: Context, deviceName: String) {&#10;        context.dataStore.edit { preferences -&gt;&#10;            preferences[DEVICE_NAME] = deviceName&#10;        }&#10;    }&#10;&#10;    fun getDeviceName(context: Context): Flow&lt;String&gt; {&#10;        return context.dataStore.data.map { preferences -&gt;&#10;            preferences[DEVICE_NAME] ?: &quot;&quot;&#10;        }&#10;    }&#10;&#10;    suspend fun saveCustomMessage(context: Context, message: String) {&#10;        context.dataStore.edit { preferences -&gt;&#10;            preferences[CUSTOM_MESSAGE] = message&#10;        }&#10;    }&#10;&#10;    fun getCustomMessage(context: Context): Flow&lt;String&gt; {&#10;        return context.dataStore.data.map { preferences -&gt;&#10;            preferences[CUSTOM_MESSAGE] ?: &quot;&quot;&quot;{&quot;type&quot;:&quot;notification&quot;,&quot;data&quot;:{&quot;title&quot;:&quot;Test&quot;,&quot;body&quot;:&quot;Hello!&quot;,&quot;app&quot;:&quot;WhatsApp&quot;}}&quot;&quot;&quot;&#10;        }&#10;    }&#10;&#10;    suspend fun setFirstRun(context: Context, isFirstRun: Boolean) {&#10;        context.dataStore.edit { preferences -&gt;&#10;            preferences[FIRST_RUN] = isFirstRun&#10;        }&#10;    }&#10;&#10;    fun getFirstRun(context: Context): Flow&lt;Boolean&gt; {&#10;        return context.dataStore.data.map { preferences -&gt;&#10;            preferences[FIRST_RUN] ?: true&#10;        }&#10;    }&#10;&#10;    suspend fun setPermissionsChecked(context: Context, checked: Boolean) {&#10;        context.dataStore.edit { preferences -&gt;&#10;            preferences[PERMISSIONS_CHECKED] = checked&#10;        }&#10;    }&#10;&#10;    fun getPermissionsChecked(context: Context): Flow&lt;Boolean&gt; {&#10;        return context.dataStore.data.map { preferences -&gt;&#10;            preferences[PERMISSIONS_CHECKED] ?: false&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/sameerasw/airsync/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/sameerasw/airsync/MainActivity.kt" />
              <option name="originalContent" value="package com.sameerasw.airsync&#10;&#10;import android.content.ComponentName&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.provider.Settings&#10;import android.util.Log&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.window.Dialog&#10;import androidx.compose.ui.text.font.FontWeight&#10;import com.sameerasw.airsync.ui.theme.AirSyncTheme&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.withContext&#10;import java.io.BufferedReader&#10;import java.io.InputStreamReader&#10;import java.io.PrintWriter&#10;import java.net.Socket&#10;&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;&#10;        val data: android.net.Uri? = intent?.data&#10;        val ip = data?.host ?: &quot;192.168.1.100&quot;&#10;        val port = data?.port?.takeIf { it != -1 }?.toString() ?: &quot;6996&quot;&#10;        val isFromQrScan = data != null&#10;&#10;        setContent {&#10;            AirSyncTheme {&#10;                Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding -&gt;&#10;                    SocketTestScreen(&#10;                        modifier = Modifier.padding(innerPadding),&#10;                        initialIp = ip,&#10;                        initialPort = port,&#10;                        showConnectionDialog = isFromQrScan&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun SocketTestScreen(&#10;    modifier: Modifier = Modifier,&#10;    initialIp: String = &quot;192.168.1.100&quot;,&#10;    initialPort: String = &quot;6996&quot;,&#10;    showConnectionDialog: Boolean = false&#10;) {&#10;    val context = LocalContext.current&#10;&#10;    // Get actual device information&#10;    val deviceName = remember { DeviceInfoUtil.getDeviceName(context) }&#10;    val localIp = remember { DeviceInfoUtil.getWifiIpAddress(context) ?: &quot;Unknown&quot; }&#10;&#10;    var ipAddress by remember { mutableStateOf(initialIp) }&#10;    var port by remember { mutableStateOf(initialPort) }&#10;    var deviceNameInput by remember { mutableStateOf(deviceName) }&#10;    var customMessage by remember { mutableStateOf(&quot;{\&quot;type\&quot;:\&quot;notification\&quot;,\&quot;data\&quot;:{\&quot;title\&quot;:\&quot;Test\&quot;,\&quot;body\&quot;:\&quot;Hello!\&quot;,\&quot;app\&quot;:\&quot;WhatsApp\&quot;}}&quot;) }&#10;    var response by remember { mutableStateOf(&quot;&quot;) }&#10;    var isLoading by remember { mutableStateOf(false) }&#10;    var isDialogVisible by remember { mutableStateOf(showConnectionDialog) }&#10;    var showPermissionDialog by remember { mutableStateOf(false) }&#10;    val scope = rememberCoroutineScope()&#10;&#10;    // Use mutableState for permission checks so they can be updated&#10;    var isNotificationEnabled by remember { mutableStateOf(PermissionUtil.isNotificationListenerEnabled(context)) }&#10;    var missingPermissions by remember { mutableStateOf(PermissionUtil.getAllMissingPermissions(context)) }&#10;&#10;    // Update permission status when app resumes or composition recomposes&#10;    LaunchedEffect(Unit) {&#10;        // Initial check&#10;        isNotificationEnabled = PermissionUtil.isNotificationListenerEnabled(context)&#10;        missingPermissions = PermissionUtil.getAllMissingPermissions(context)&#10;&#10;        if (missingPermissions.isNotEmpty()) {&#10;            showPermissionDialog = true&#10;        }&#10;    }&#10;&#10;    // Add a refresh function to check permissions again&#10;    fun refreshPermissions() {&#10;        isNotificationEnabled = PermissionUtil.isNotificationListenerEnabled(context)&#10;        missingPermissions = PermissionUtil.getAllMissingPermissions(context)&#10;    }&#10;&#10;    fun send(message: String) {&#10;        scope.launch {&#10;            testSocket(ipAddress, port.toIntOrNull() ?: 6996, message) { result -&gt;&#10;                response = result&#10;                isLoading = false&#10;            }&#10;        }&#10;        isLoading = true&#10;        response = &quot;&quot;&#10;    }&#10;&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        Text(&quot;AirSync&quot;, style = MaterialTheme.typography.headlineMedium)&#10;&#10;        // Permission Status Card&#10;        if (missingPermissions.isNotEmpty()) {&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.errorContainer)&#10;            ) {&#10;                Column(modifier = Modifier.padding(16.dp)) {&#10;                    Text(&quot;⚠️ Permissions Required&quot;,&#10;                         style = MaterialTheme.typography.titleMedium,&#10;                         color = MaterialTheme.colorScheme.onErrorContainer)&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    Text(&quot;Missing: ${missingPermissions.joinToString(&quot;, &quot;)}&quot;,&#10;                         style = MaterialTheme.typography.bodyMedium,&#10;                         color = MaterialTheme.colorScheme.onErrorContainer)&#10;&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth().padding(top = 8.dp),&#10;                        horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                    ) {&#10;                        Button(&#10;                            onClick = { showPermissionDialog = true },&#10;                            modifier = Modifier.weight(1f),&#10;                            colors = ButtonDefaults.buttonColors(&#10;                                containerColor = MaterialTheme.colorScheme.error&#10;                            )&#10;                        ) {&#10;                            Text(&quot;Grant Permissions&quot;, color = MaterialTheme.colorScheme.onError)&#10;                        }&#10;&#10;                        OutlinedButton(&#10;                            onClick = { refreshPermissions() },&#10;                            modifier = Modifier.weight(1f)&#10;                        ) {&#10;                            Text(&quot;Refresh&quot;)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Device Info Section&#10;        Card(modifier = Modifier.fillMaxWidth()) {&#10;            Column(modifier = Modifier.padding(16.dp)) {&#10;                Text(&quot;Device Information&quot;, style = MaterialTheme.typography.titleMedium)&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                Text(&quot;Local IP: $localIp&quot;, style = MaterialTheme.typography.bodyMedium)&#10;&#10;                val batteryInfo by rememberUpdatedState(DeviceInfoUtil.getBatteryInfo(context))&#10;                val audioInfo by rememberUpdatedState(DeviceInfoUtil.getAudioInfo(context))&#10;&#10;                Text(&quot;Battery: ${batteryInfo.level}% ${if (batteryInfo.isCharging) &quot;⚡&quot; else &quot;&quot;}&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium)&#10;                Text(&quot;Volume: ${audioInfo.volume}% ${if (audioInfo.isMuted) &quot;&quot; else &quot;&quot;}&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium)&#10;&#10;                // Show media info status with refresh&#10;                if (isNotificationEnabled) {&#10;                    if (audioInfo.title.isNotEmpty()) {&#10;                        Text(&quot; ${audioInfo.title} - ${audioInfo.artist}&quot;,&#10;                             style = MaterialTheme.typography.bodyMedium)&#10;                    } else {&#10;                        Text(&quot; No media playing&quot;, style = MaterialTheme.typography.bodyMedium)&#10;                    }&#10;                } else {&#10;                    Text(&quot; Media info unavailable (permission needed)&quot;,&#10;                         style = MaterialTheme.typography.bodyMedium,&#10;                         color = MaterialTheme.colorScheme.error)&#10;                }&#10;&#10;                OutlinedTextField(&#10;                    value = deviceNameInput,&#10;                    onValueChange = { deviceNameInput = it },&#10;                    label = { Text(&quot;Device Name&quot;) },&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth().padding(top = 8.dp),&#10;                    horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    OutlinedButton(&#10;                        onClick = {&#10;                            refreshPermissions()&#10;                            // Force recomposition to get fresh media info&#10;                        },&#10;                        modifier = Modifier.weight(1f)&#10;                    ) {&#10;                        Text(&quot;Refresh Media&quot;)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Connection Settings&#10;        OutlinedTextField(&#10;            value = ipAddress,&#10;            onValueChange = { ipAddress = it },&#10;            label = { Text(&quot;Desktop IP Address&quot;) },&#10;            modifier = Modifier.fillMaxWidth()&#10;        )&#10;&#10;        OutlinedTextField(&#10;            value = port,&#10;            onValueChange = { port = it },&#10;            label = { Text(&quot;Desktop Port&quot;) },&#10;            modifier = Modifier.fillMaxWidth()&#10;        )&#10;&#10;        HorizontalDivider()&#10;&#10;        Button(&#10;            onClick = {&#10;                val message = JsonUtil.createDeviceInfoJson(deviceNameInput, localIp, port.toIntOrNull() ?: 6996)&#10;                send(message)&#10;            },&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            Text(&quot;Send Device Info&quot;)&#10;        }&#10;&#10;        Button(&#10;            onClick = {&#10;                val message = JsonUtil.createNotificationJson(&quot;Test Message&quot;, &quot;This is a simulated notification.&quot;, &quot;Telegram&quot;)&#10;                send(message)&#10;&#10;            },&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            Text(&quot;Send Notification&quot;)&#10;        }&#10;&#10;        Button(&#10;            onClick = {&#10;                val message = DeviceInfoUtil.generateDeviceStatusJson(context, port.toIntOrNull() ?: 6996)&#10;                send(message)&#10;&#10;            },&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            Text(&quot;Send Device Status&quot;)&#10;        }&#10;&#10;        HorizontalDivider()&#10;&#10;        OutlinedTextField(&#10;            value = customMessage,&#10;            onValueChange = { customMessage = it },&#10;            label = { Text(&quot;Custom Raw JSON&quot;) },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            maxLines = 4&#10;        )&#10;&#10;        Button(&#10;            onClick = { send(customMessage) },&#10;            enabled = !isLoading &amp;&amp; ipAddress.isNotBlank() &amp;&amp; port.isNotBlank() &amp;&amp; customMessage.isNotBlank(),&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            if (isLoading) {&#10;                CircularProgressIndicator(modifier = Modifier.size(16.dp), strokeWidth = 2.dp)&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;            }&#10;            Text(if (isLoading) &quot;Sending...&quot; else &quot;Send Custom Message&quot;)&#10;        }&#10;&#10;        if (response.isNotEmpty()) {&#10;            Card(modifier = Modifier.fillMaxWidth()) {&#10;                Text(response, modifier = Modifier.padding(16.dp))&#10;            }&#10;        }&#10;&#10;        if (isDialogVisible) {&#10;            ConnectionDialog(&#10;                deviceName = deviceNameInput,&#10;                localIp = localIp,&#10;                desktopIp = ipAddress,&#10;                port = port,&#10;                onDismiss = { isDialogVisible = false },&#10;                onConnect = {&#10;                    isDialogVisible = false&#10;                    // Send device info automatically&#10;                    val message = JsonUtil.createDeviceInfoJson(deviceNameInput, localIp, port.toIntOrNull() ?: 6996)&#10;                    send(message)&#10;                }&#10;            )&#10;        }&#10;&#10;        if (showPermissionDialog) {&#10;            PermissionDialog(&#10;                missingPermissions = missingPermissions,&#10;                onDismiss = { showPermissionDialog = false },&#10;                onGrantPermissions = {&#10;                    PermissionUtil.openNotificationListenerSettings(context)&#10;                    showPermissionDialog = false&#10;                }&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ConnectionDialog(&#10;    deviceName: String,&#10;    localIp: String,&#10;    desktopIp: String,&#10;    port: String,&#10;    onDismiss: () -&gt; Unit,&#10;    onConnect: () -&gt; Unit&#10;) {&#10;    Dialog(onDismissRequest = onDismiss) {&#10;        Surface(&#10;            shape = MaterialTheme.shapes.medium,&#10;            tonalElevation = 3.dp&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .padding(24.dp)&#10;                    .width(280.dp),&#10;                verticalArrangement = Arrangement.spacedBy(16.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;Connect to Desktop?&quot;,&#10;                    style = MaterialTheme.typography.titleMedium.copy(fontWeight = FontWeight.Bold)&#10;                )&#10;&#10;                Text(&quot;Do you want to connect to:&quot;)&#10;                Text(&quot;IP Address: $desktopIp&quot;)&#10;                Text(&quot;Port: $port&quot;)&#10;&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    OutlinedButton(&#10;                        onClick = onDismiss,&#10;                        modifier = Modifier.weight(1f)&#10;                    ) {&#10;                        Text(&quot;Cancel&quot;)&#10;                    }&#10;&#10;                    Button(&#10;                        onClick = onConnect,&#10;                        modifier = Modifier.weight(1f)&#10;                    ) {&#10;                        Text(&quot;Connect&quot;)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun PermissionDialog(&#10;    missingPermissions: List&lt;String&gt;,&#10;    onDismiss: () -&gt; Unit,&#10;    onGrantPermissions: () -&gt; Unit&#10;) {&#10;    Dialog(onDismissRequest = onDismiss) {&#10;        Surface(&#10;            shape = MaterialTheme.shapes.medium,&#10;            tonalElevation = 3.dp&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .padding(24.dp)&#10;                    .width(300.dp),&#10;                verticalArrangement = Arrangement.spacedBy(16.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;Permissions Required&quot;,&#10;                    style = MaterialTheme.typography.titleMedium.copy(fontWeight = FontWeight.Bold)&#10;                )&#10;&#10;                Text(&quot;The following permissions are needed for full functionality:&quot;)&#10;                missingPermissions.forEach { permission -&gt;&#10;                    Text(&quot;• $permission&quot;)&#10;                }&#10;&#10;                Text(&quot;Please enable them in the settings.&quot;)&#10;&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    OutlinedButton(&#10;                        onClick = onDismiss,&#10;                        modifier = Modifier.weight(1f)&#10;                    ) {&#10;                        Text(&quot;Dismiss&quot;)&#10;                    }&#10;&#10;                    Button(&#10;                        onClick = onGrantPermissions,&#10;                        modifier = Modifier.weight(1f)&#10;                    ) {&#10;                        Text(&quot;Settings&quot;)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;private suspend fun testSocket(ipAddress: String, port: Int, message: String, onResult: (String) -&gt; Unit) {&#10;    withContext(Dispatchers.IO) {&#10;        try {&#10;            val socket = Socket(ipAddress, port)&#10;            val output = PrintWriter(socket.getOutputStream(), true)&#10;            val input = BufferedReader(InputStreamReader(socket.getInputStream()))&#10;&#10;            output.println(message)&#10;            val response = input.readLine()&#10;            Log.d(&quot;TCP&quot;, &quot;Received: $response&quot;)&#10;&#10;            socket.close()&#10;&#10;            withContext(Dispatchers.Main) {&#10;                onResult(&quot;Success! Received: $response&quot;)&#10;            }&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;TCP&quot;, &quot;Socket error: ${e.message}&quot;)&#10;            withContext(Dispatchers.Main) {&#10;                onResult(&quot;Error: ${e.message}&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun SocketTestPreview() {&#10;    AirSyncTheme {&#10;        SocketTestScreen()&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.sameerasw.airsync&#10;&#10;import android.os.Bundle&#10;import android.util.Log&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.window.Dialog&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.sameerasw.airsync.ui.theme.AirSyncTheme&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.withContext&#10;import java.io.BufferedReader&#10;import java.io.InputStreamReader&#10;import java.io.PrintWriter&#10;import java.net.Socket&#10;&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;&#10;        val data: android.net.Uri? = intent?.data&#10;        val ip = data?.host&#10;        val port = data?.port?.takeIf { it != -1 }?.toString()&#10;        val isFromQrScan = data != null&#10;&#10;        setContent {&#10;            AirSyncTheme {&#10;                Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding -&gt;&#10;                    SocketTestScreen(&#10;                        modifier = Modifier.padding(innerPadding),&#10;                        initialIp = ip,&#10;                        initialPort = port,&#10;                        showConnectionDialog = isFromQrScan&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun SocketTestScreen(&#10;    modifier: Modifier = Modifier,&#10;    initialIp: String? = null,&#10;    initialPort: String? = null,&#10;    showConnectionDialog: Boolean = false,&#10;    viewModel: AirSyncViewModel = viewModel()&#10;) {&#10;    val context = LocalContext.current&#10;    val uiState by viewModel.uiState.collectAsState()&#10;    val deviceInfo by viewModel.deviceInfo.collectAsState()&#10;    val scope = rememberCoroutineScope()&#10;&#10;    // Initialize state when the composable is first created&#10;    LaunchedEffect(Unit) {&#10;        viewModel.initializeState(context, initialIp, initialPort, showConnectionDialog)&#10;    }&#10;&#10;    // Refresh permissions when returning from settings&#10;    LaunchedEffect(uiState.showPermissionDialog) {&#10;        if (!uiState.showPermissionDialog) {&#10;            viewModel.refreshPermissions(context)&#10;        }&#10;    }&#10;&#10;    fun send(message: String) {&#10;        scope.launch {&#10;            viewModel.setLoading(true)&#10;            viewModel.setResponse(&quot;&quot;)&#10;            testSocket(uiState.ipAddress, uiState.port.toIntOrNull() ?: 6996, message) { result -&gt;&#10;                viewModel.setResponse(result)&#10;                viewModel.setLoading(false)&#10;            }&#10;        }&#10;    }&#10;&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .verticalScroll(rememberScrollState())&#10;            .padding(16.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        Text(&quot;AirSync&quot;, style = MaterialTheme.typography.headlineMedium)&#10;&#10;        // Permission Status Card&#10;        if (uiState.missingPermissions.isNotEmpty()) {&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.errorContainer)&#10;            ) {&#10;                Column(modifier = Modifier.padding(16.dp)) {&#10;                    Text(&quot;⚠️ Permissions Required&quot;,&#10;                         style = MaterialTheme.typography.titleMedium,&#10;                         color = MaterialTheme.colorScheme.onErrorContainer)&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    Text(&quot;Missing: ${uiState.missingPermissions.joinToString(&quot;, &quot;)}&quot;,&#10;                         style = MaterialTheme.typography.bodyMedium,&#10;                         color = MaterialTheme.colorScheme.onErrorContainer)&#10;&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth().padding(top = 8.dp),&#10;                        horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                    ) {&#10;                        Button(&#10;                            onClick = { viewModel.setPermissionDialogVisible(true) },&#10;                            modifier = Modifier.weight(1f),&#10;                            colors = ButtonDefaults.buttonColors(&#10;                                containerColor = MaterialTheme.colorScheme.error&#10;                            )&#10;                        ) {&#10;                            Text(&quot;Grant Permissions&quot;, color = MaterialTheme.colorScheme.onError)&#10;                        }&#10;&#10;                        OutlinedButton(&#10;                            onClick = { viewModel.refreshPermissions(context) },&#10;                            modifier = Modifier.weight(1f)&#10;                        ) {&#10;                            Text(&quot;Refresh&quot;)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Device Info Section&#10;        Card(modifier = Modifier.fillMaxWidth()) {&#10;            Column(modifier = Modifier.padding(16.dp)) {&#10;                Text(&quot;Device Information&quot;, style = MaterialTheme.typography.titleMedium)&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                Text(&quot;Local IP: ${deviceInfo.localIp}&quot;, style = MaterialTheme.typography.bodyMedium)&#10;&#10;                val batteryInfo by rememberUpdatedState(DeviceInfoUtil.getBatteryInfo(context))&#10;                val audioInfo by rememberUpdatedState(DeviceInfoUtil.getAudioInfo(context))&#10;&#10;                Text(&quot;Battery: ${batteryInfo.level}% ${if (batteryInfo.isCharging) &quot;⚡&quot; else &quot;&quot;}&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium)&#10;                Text(&quot;Volume: ${audioInfo.volume}% ${if (audioInfo.isMuted) &quot;&quot; else &quot;&quot;}&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium)&#10;&#10;                // Show media info status with refresh&#10;                if (uiState.isNotificationEnabled) {&#10;                    if (audioInfo.title.isNotEmpty()) {&#10;                        Text(&quot; ${audioInfo.title} - ${audioInfo.artist}&quot;,&#10;                             style = MaterialTheme.typography.bodyMedium)&#10;                    } else {&#10;                        Text(&quot; No media playing&quot;, style = MaterialTheme.typography.bodyMedium)&#10;                    }&#10;                } else {&#10;                    Text(&quot; Media info unavailable (permission needed)&quot;,&#10;                         style = MaterialTheme.typography.bodyMedium,&#10;                         color = MaterialTheme.colorScheme.error)&#10;                }&#10;&#10;                OutlinedTextField(&#10;                    value = uiState.deviceNameInput,&#10;                    onValueChange = { viewModel.updateDeviceName(context, it) },&#10;                    label = { Text(&quot;Device Name&quot;) },&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth().padding(top = 8.dp),&#10;                    horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    OutlinedButton(&#10;                        onClick = {&#10;                            viewModel.refreshPermissions(context)&#10;                            viewModel.refreshDeviceInfo(context)&#10;                        },&#10;                        modifier = Modifier.weight(1f)&#10;                    ) {&#10;                        Text(&quot;Refresh Media&quot;)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Connection Settings&#10;        OutlinedTextField(&#10;            value = uiState.ipAddress,&#10;            onValueChange = { viewModel.updateIpAddress(context, it) },&#10;            label = { Text(&quot;Desktop IP Address&quot;) },&#10;            modifier = Modifier.fillMaxWidth()&#10;        )&#10;&#10;        OutlinedTextField(&#10;            value = uiState.port,&#10;            onValueChange = { viewModel.updatePort(context, it) },&#10;            label = { Text(&quot;Desktop Port&quot;) },&#10;            modifier = Modifier.fillMaxWidth()&#10;        )&#10;&#10;        HorizontalDivider()&#10;&#10;        Button(&#10;            onClick = {&#10;                val message = JsonUtil.createDeviceInfoJson(deviceInfo.name, deviceInfo.localIp, uiState.port.toIntOrNull() ?: 6996)&#10;                send(message)&#10;            },&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            Text(&quot;Send Device Info&quot;)&#10;        }&#10;&#10;        Button(&#10;            onClick = {&#10;                val message = JsonUtil.createNotificationJson(&quot;Test Message&quot;, &quot;This is a simulated notification.&quot;, &quot;Telegram&quot;)&#10;                send(message)&#10;            },&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            Text(&quot;Send Notification&quot;)&#10;        }&#10;&#10;        Button(&#10;            onClick = {&#10;                val message = DeviceInfoUtil.generateDeviceStatusJson(context, uiState.port.toIntOrNull() ?: 6996)&#10;                send(message)&#10;            },&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            Text(&quot;Send Device Status&quot;)&#10;        }&#10;&#10;        HorizontalDivider()&#10;&#10;        OutlinedTextField(&#10;            value = uiState.customMessage,&#10;            onValueChange = { viewModel.updateCustomMessage(context, it) },&#10;            label = { Text(&quot;Custom Raw JSON&quot;) },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            maxLines = 4&#10;        )&#10;&#10;        Button(&#10;            onClick = { send(uiState.customMessage) },&#10;            enabled = !uiState.isLoading &amp;&amp; uiState.ipAddress.isNotBlank() &amp;&amp; uiState.port.isNotBlank() &amp;&amp; uiState.customMessage.isNotBlank(),&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            if (uiState.isLoading) {&#10;                CircularProgressIndicator(modifier = Modifier.size(16.dp), strokeWidth = 2.dp)&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;            }&#10;            Text(if (uiState.isLoading) &quot;Sending...&quot; else &quot;Send Custom Message&quot;)&#10;        }&#10;&#10;        if (uiState.response.isNotEmpty()) {&#10;            Card(modifier = Modifier.fillMaxWidth()) {&#10;                Text(uiState.response, modifier = Modifier.padding(16.dp))&#10;            }&#10;        }&#10;&#10;        if (uiState.isDialogVisible) {&#10;            ConnectionDialog(&#10;                deviceName = deviceInfo.name,&#10;                localIp = deviceInfo.localIp,&#10;                desktopIp = uiState.ipAddress,&#10;                port = uiState.port,&#10;                onDismiss = { viewModel.setDialogVisible(false) },&#10;                onConnect = {&#10;                    viewModel.setDialogVisible(false)&#10;                    // Send device info automatically&#10;                    val message = JsonUtil.createDeviceInfoJson(deviceInfo.name, deviceInfo.localIp, uiState.port.toIntOrNull() ?: 6996)&#10;                    send(message)&#10;                }&#10;            )&#10;        }&#10;&#10;        if (uiState.showPermissionDialog) {&#10;            PermissionDialog(&#10;                missingPermissions = uiState.missingPermissions,&#10;                onDismiss = { viewModel.setPermissionDialogVisible(false) },&#10;                onGrantPermissions = {&#10;                    PermissionUtil.openNotificationListenerSettings(context)&#10;                    viewModel.setPermissionDialogVisible(false)&#10;                }&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ConnectionDialog(&#10;    deviceName: String,&#10;    localIp: String,&#10;    desktopIp: String,&#10;    port: String,&#10;    onDismiss: () -&gt; Unit,&#10;    onConnect: () -&gt; Unit&#10;) {&#10;    Dialog(onDismissRequest = onDismiss) {&#10;        Surface(&#10;            shape = MaterialTheme.shapes.medium,&#10;            tonalElevation = 3.dp&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .padding(24.dp)&#10;                    .width(300.dp),&#10;                verticalArrangement = Arrangement.spacedBy(16.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;Connect to Desktop?&quot;,&#10;                    style = MaterialTheme.typography.titleMedium.copy(fontWeight = FontWeight.Bold)&#10;                )&#10;&#10;                Text(&quot;Device: $deviceName&quot;)&#10;                Text(&quot;Local IP: $localIp&quot;)&#10;&#10;                HorizontalDivider()&#10;&#10;                Text(&quot;Connect to Desktop:&quot;)&#10;                Text(&quot;IP Address: $desktopIp&quot;)&#10;                Text(&quot;Port: $port&quot;)&#10;&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    OutlinedButton(&#10;                        onClick = onDismiss,&#10;                        modifier = Modifier.weight(1f)&#10;                    ) {&#10;                        Text(&quot;Cancel&quot;)&#10;                    }&#10;&#10;                    Button(&#10;                        onClick = onConnect,&#10;                        modifier = Modifier.weight(1f)&#10;                    ) {&#10;                        Text(&quot;Connect&quot;)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun PermissionDialog(&#10;    missingPermissions: List&lt;String&gt;,&#10;    onDismiss: () -&gt; Unit,&#10;    onGrantPermissions: () -&gt; Unit&#10;) {&#10;    Dialog(onDismissRequest = onDismiss) {&#10;        Surface(&#10;            shape = MaterialTheme.shapes.medium,&#10;            tonalElevation = 3.dp&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .padding(24.dp)&#10;                    .width(300.dp),&#10;                verticalArrangement = Arrangement.spacedBy(16.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;Permissions Required&quot;,&#10;                    style = MaterialTheme.typography.titleMedium.copy(fontWeight = FontWeight.Bold)&#10;                )&#10;&#10;                Text(&quot;The following permissions are needed for full functionality:&quot;)&#10;                missingPermissions.forEach { permission -&gt;&#10;                    Text(&quot;• $permission&quot;)&#10;                }&#10;&#10;                Text(&quot;Please enable them in the settings.&quot;)&#10;&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    OutlinedButton(&#10;                        onClick = onDismiss,&#10;                        modifier = Modifier.weight(1f)&#10;                    ) {&#10;                        Text(&quot;Dismiss&quot;)&#10;                    }&#10;&#10;                    Button(&#10;                        onClick = onGrantPermissions,&#10;                        modifier = Modifier.weight(1f)&#10;                    ) {&#10;                        Text(&quot;Settings&quot;)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;private suspend fun testSocket(ipAddress: String, port: Int, message: String, onResult: (String) -&gt; Unit) {&#10;    withContext(Dispatchers.IO) {&#10;        try {&#10;            val socket = Socket(ipAddress, port)&#10;            val output = PrintWriter(socket.getOutputStream(), true)&#10;            val input = BufferedReader(InputStreamReader(socket.getInputStream()))&#10;&#10;            output.println(message)&#10;            val response = input.readLine()&#10;            Log.d(&quot;TCP&quot;, &quot;Received: $response&quot;)&#10;&#10;            socket.close()&#10;&#10;            withContext(Dispatchers.Main) {&#10;                onResult(&quot;Success! Received: $response&quot;)&#10;            }&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;TCP&quot;, &quot;Socket error: ${e.message}&quot;)&#10;            withContext(Dispatchers.Main) {&#10;                onResult(&quot;Error: ${e.message}&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun SocketTestPreview() {&#10;    AirSyncTheme {&#10;        SocketTestScreen()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>